#!/bin/bash

# Client Feedback Hub - –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—é
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑—É—î –ø—Ä–æ—Ü–µ—Å –¥–µ–ø–ª–æ—é –Ω–∞ —Ä—ñ–∑–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞

set -e

echo "üöÄ Client Feedback Hub - –î–µ–ø–ª–æ–π"
echo "================================"

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
DOCKER_REGISTRY="${DOCKER_REGISTRY:-ghcr.io}"
IMAGE_PREFIX="${IMAGE_PREFIX:-cfh}"
VERSION="${VERSION:-$(git describe --tags --always 2>/dev/null || echo 'latest')}"

# –ö–æ–ª—å–æ—Ä–∏
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[DEPLOY]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –§—É–Ω–∫—Ü—ñ—è –∑–±—ñ—Ä–∫–∏ –æ–±—Ä–∞–∑—ñ–≤
build_images() {
    local environment=$1
    
    print_status "–ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—ñ–≤ –¥–ª—è $environment..."
    
    # –ó–±—ñ—Ä–∫–∞ backend
    print_status "–ó–±—ñ—Ä–∫–∞ backend –æ–±—Ä–∞–∑—É..."
    docker build \
        --build-arg NODE_ENV=$environment \
        --tag $DOCKER_REGISTRY/$IMAGE_PREFIX-backend:$VERSION \
        --tag $DOCKER_REGISTRY/$IMAGE_PREFIX-backend:latest \
        backend/
    
    # –ó–±—ñ—Ä–∫–∞ frontend
    print_status "–ó–±—ñ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑—É..."
    docker build \
        --build-arg NODE_ENV=$environment \
        --tag $DOCKER_REGISTRY/$IMAGE_PREFIX-frontend:$VERSION \
        --tag $DOCKER_REGISTRY/$IMAGE_PREFIX-frontend:latest \
        frontend/
    
    print_success "–û–±—Ä–∞–∑–∏ –∑—ñ–±—Ä–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
}

# –§—É–Ω–∫—Ü—ñ—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –æ–±—Ä–∞–∑—ñ–≤
push_images() {
    print_status "–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –æ–±—Ä–∞–∑—ñ–≤ —É —Ä–µ—î—Å—Ç—Ä..."
    
    # Backend
    docker push $DOCKER_REGISTRY/$IMAGE_PREFIX-backend:$VERSION
    docker push $DOCKER_REGISTRY/$IMAGE_PREFIX-backend:latest
    
    # Frontend
    docker push $DOCKER_REGISTRY/$IMAGE_PREFIX-frontend:$VERSION
    docker push $DOCKER_REGISTRY/$IMAGE_PREFIX-frontend:latest
    
    print_success "–û–±—Ä–∞–∑–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ"
}

# –î–µ–ø–ª–æ–π –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
deploy_local() {
    print_status "–î–µ–ø–ª–æ–π –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ..."
    
    # –ó—É–ø–∏–Ω–∫–∞ –ø–æ—Ç–æ—á–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    docker-compose down 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫ –∑ –Ω–æ–≤–∏–º–∏ –æ–±—Ä–∞–∑–∞–º–∏
    docker-compose up -d
    
    # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
    print_status "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    sleep 10
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è
    if curl -f http://localhost:3000/api/health >/dev/null 2>&1; then
        print_success "Backend –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ http://localhost:3000"
    else
        print_warning "Backend –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î"
    fi
    
    if curl -f http://localhost:5173 >/dev/null 2>&1; then
        print_success "Frontend –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ http://localhost:5173"
    else
        print_warning "Frontend –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î"
    fi
}

# –î–µ–ø–ª–æ–π –Ω–∞ staging
deploy_staging() {
    print_status "–î–µ–ø–ª–æ–π –Ω–∞ staging —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ..."
    
    # TODO: –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ staging –¥–µ–ø–ª–æ–π
    print_warning "Staging –¥–µ–ø–ª–æ–π —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π"
    print_status "–î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:"
    print_status "1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä –∞–±–æ Docker Swarm"
    print_status "2. –°—Ç–≤–æ—Ä—ñ—Ç—å staging –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"
    print_status "3. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ CI/CD pipeline"
}

# –î–µ–ø–ª–æ–π –Ω–∞ production
deploy_production() {
    print_status "–î–µ–ø–ª–æ–π –Ω–∞ production —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ..."
    
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    echo -n "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–¥–µ–ø–ª–æ—ó—Ç–∏ –Ω–∞ production? (yes/no): "
    read -r confirmation
    if [ "$confirmation" != "yes" ]; then
        print_status "–î–µ–ø–ª–æ–π —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
        exit 0
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–≥—É –≤–µ—Ä—Å—ñ—ó
    if [ "$VERSION" = "latest" ]; then
        print_error "–î–ª—è production –¥–µ–ø–ª–æ—é –ø–æ—Ç—Ä—ñ–±–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–µ–≥ –≤–µ—Ä—Å—ñ—ó"
        print_status "–°—Ç–≤–æ—Ä—ñ—Ç—å —Ç–µ–≥: git tag v1.0.0 && git push origin v1.0.0"
        exit 1
    fi
    
    # TODO: –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ production –¥–µ–ø–ª–æ–π
    print_warning "Production –¥–µ–ø–ª–æ–π —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π"
    print_status "–î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:"
    print_status "1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ production –∫–ª–∞—Å—Ç–µ—Ä"
    print_status "2. –°—Ç–≤–æ—Ä—ñ—Ç—å production –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"
    print_status "3. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è"
    print_status "4. –°—Ç–≤–æ—Ä—ñ—Ç—å backup —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é"
}

# –†–æ–ª–ª–±–µ–∫ –¥–µ–ø–ª–æ—é
rollback_deployment() {
    local environment=$1
    local version=$2
    
    print_status "–†–æ–ª–ª–±–µ–∫ –¥–æ –≤–µ—Ä—Å—ñ—ó $version –Ω–∞ $environment..."
    
    case $environment in
        "local")
            # –õ–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–ª–ª–±–µ–∫
            VERSION=$version docker-compose up -d
            ;;
        "staging"|"production")
            print_warning "–†–æ–ª–ª–±–µ–∫ –¥–ª—è $environment —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π"
            ;;
    esac
    
    print_success "–†–æ–ª–ª–±–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è –ø—ñ—Å–ª—è –¥–µ–ø–ª–æ—é
health_check() {
    local environment=$1
    
    print_status "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è $environment..."
    
    case $environment in
        "local")
            local backend_url="http://localhost:3000"
            local frontend_url="http://localhost:5173"
            ;;
        "staging")
            local backend_url="https://api-staging.cfh.example.com"
            local frontend_url="https://staging.cfh.example.com"
            ;;
        "production")
            local backend_url="https://api.cfh.example.com"
            local frontend_url="https://cfh.example.com"
            ;;
    esac
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ backend
    if curl -f "$backend_url/api/health" >/dev/null 2>&1; then
        print_success "‚úÖ Backend healthy"
    else
        print_error "‚ùå Backend unhealthy"
        return 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ frontend
    if curl -f "$frontend_url" >/dev/null 2>&1; then
        print_success "‚úÖ Frontend healthy"
    else
        print_error "‚ùå Frontend unhealthy"
        return 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (—Ç—ñ–ª—å–∫–∏ –¥–ª—è backend)
    if curl -f "$backend_url/api/health/db" >/dev/null 2>&1; then
        print_success "‚úÖ Database healthy"
    else
        print_error "‚ùå Database unhealthy"
        return 1
    fi
    
    print_success "–í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
}

# –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
backup_database() {
    local environment=$1
    local timestamp=$(date '+%Y%m%d_%H%M%S')
    local backup_file="backup_${environment}_${timestamp}.sql"
    
    print_status "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –ë–î –¥–ª—è $environment..."
    
    case $environment in
        "local")
            pg_dump client_feedback_hub > "backups/$backup_file"
            ;;
        "staging"|"production")
            print_warning "Backup –¥–ª—è $environment –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏"
            ;;
    esac
    
    print_success "Backup –∑–±–µ—Ä–µ–∂–µ–Ω–æ: $backup_file"
}

# –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—é
show_status() {
    local environment=${1:-"local"}
    
    print_status "–°—Ç–∞—Ç—É—Å $environment —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:"
    echo
    
    case $environment in
        "local")
            echo "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏:"
            docker-compose ps
            echo
            echo "–û–±—Ä–∞–∑–∏:"
            docker images | grep cfh || echo "–ù–µ–º–∞—î –æ–±—Ä–∞–∑—ñ–≤ CFH"
            ;;
        *)
            print_warning "–°—Ç–∞—Ç—É—Å –¥–ª—è $environment –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π"
            ;;
    esac
}

# –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏
show_logs() {
    local environment=${1:-"local"}
    local service=${2:-""}
    
    print_status "–õ–æ–≥–∏ $environment${service:+ —Å–µ—Ä–≤—ñ—Å—É $service}:"
    
    case $environment in
        "local")
            if [ -n "$service" ]; then
                docker-compose logs -f "$service"
            else
                docker-compose logs -f
            fi
            ;;
        *)
            print_warning "–õ–æ–≥–∏ –¥–ª—è $environment –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ"
            ;;
    esac
}

# –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É
show_help() {
    echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 <–∫–æ–º–∞–Ω–¥–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä–∏]"
    echo
    echo "–ö–æ–º–∞–Ω–¥–∏:"
    echo "  build <env>           –ó—ñ–±—Ä–∞—Ç–∏ –æ–±—Ä–∞–∑–∏ –¥–ª—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"
    echo "  push                  –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –æ–±—Ä–∞–∑–∏ —É —Ä–µ—î—Å—Ç—Ä"
    echo "  deploy <env>          –ó–∞–¥–µ–ø–ª–æ—ó—Ç–∏ –Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ"
    echo "  rollback <env> <ver>  –í—ñ–¥–∫–æ—Ç–∏—Ç–∏ –¥–æ –≤–µ—Ä—Å—ñ—ó"
    echo "  health <env>          –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–¥–æ—Ä–æ–≤'—è"
    echo "  backup <env>          –°—Ç–≤–æ—Ä–∏—Ç–∏ backup –ë–î"
    echo "  status [env]          –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å"
    echo "  logs [env] [service]  –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏"
    echo
    echo "–°–µ—Ä–µ–¥–æ–≤–∏—â–∞:"
    echo "  local        –õ–æ–∫–∞–ª—å–Ω–∞ —Ä–æ–∑—Ä–æ–±–∫–∞"
    echo "  staging      –¢–µ—Å—Ç–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ"
    echo "  production   –ë–æ—î–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ"
    echo
    echo "–ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:"
    echo "  DOCKER_REGISTRY   –†–µ—î—Å—Ç—Ä –æ–±—Ä–∞–∑—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: ghcr.io)"
    echo "  IMAGE_PREFIX      –ü—Ä–µ—Ñ—ñ–∫—Å –æ–±—Ä–∞–∑—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: cfh)"
    echo "  VERSION           –í–µ—Ä—Å—ñ—è –¥–ª—è –¥–µ–ø–ª–æ—é (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: git describe)"
    echo
    echo "–ü—Ä–∏–∫–ª–∞–¥–∏:"
    echo "  $0 build local"
    echo "  $0 deploy staging"
    echo "  $0 rollback production v1.2.0"
    echo "  $0 logs local backend"
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    local command=${1:-}
    
    case $command in
        "build")
            build_images "${2:-local}"
            ;;
        "push")
            push_images
            ;;
        "deploy")
            local env=${2:-local}
            case $env in
                "local")
                    deploy_local
                    ;;
                "staging")
                    deploy_staging
                    ;;
                "production")
                    deploy_production
                    ;;
                *)
                    print_error "–ù–µ–≤—ñ–¥–æ–º–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ: $env"
                    exit 1
                    ;;
            esac
            ;;
        "rollback")
            rollback_deployment "${2:-local}" "${3:-latest}"
            ;;
        "health")
            health_check "${2:-local}"
            ;;
        "backup")
            backup_database "${2:-local}"
            ;;
        "status")
            show_status "${2:-local}"
            ;;
        "logs")
            show_logs "${2:-local}" "${3:-}"
            ;;
        "-h"|"--help"|"help")
            show_help
            ;;
        "")
            print_error "–ù–µ –≤–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞"
            show_help
            exit 1
            ;;
        *)
            print_error "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: $command"
            show_help
            exit 1
            ;;
    esac
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è backup
mkdir -p backups

# –ó–∞–ø—É—Å–∫
main "$@"