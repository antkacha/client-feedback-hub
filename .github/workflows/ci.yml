# GitHub Actions CI/CD workflow –¥–ª—è Client Feedback Hub
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ push —Ç–∞ pull request –¥–æ main —Ç–∞ develop –≥—ñ–ª–æ–∫
# –í–∏–∫–æ–Ω—É—î –ª—ñ–Ω—Ç–∏–Ω–≥, —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, type-checking —Ç–∞ –∑–±—ñ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç—É

name: 'CI/CD Pipeline'

# –¢—Ä–∏–≥–µ—Ä–∏ –¥–ª—è –∑–∞–ø—É—Å–∫—É workflow
on:
  # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ push –¥–æ –æ—Å–Ω–æ–≤–Ω–∏—Ö –≥—ñ–ª–æ–∫
  push:
    branches: [main, develop]
  
  # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ pull request –¥–æ –æ—Å–Ω–æ–≤–Ω–∏—Ö –≥—ñ–ª–æ–∫
  pull_request:
    branches: [main, develop]
  
  # –î–æ–∑–≤–æ–ª–∏—Ç–∏ —Ä—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫ workflow
  workflow_dispatch:

# –î–æ–∑–≤–æ–ª–∏ –¥–ª—è —Ç–æ–∫–µ–Ω—É GitHub
permissions:
  contents: read # –ß–∏—Ç–∞—Ç–∏ –∫–æ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
  checks: write  # –ó–∞–ø–∏—Å—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
  pull-requests: write # –ö–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏ PR

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
env:
  NODE_VERSION: '18.x' # –í–µ—Ä—Å—ñ—è Node.js –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
  CACHE_VERSION: 'v1'  # –í–µ—Ä—Å—ñ—è –∫–µ—à—É (–∑–±—ñ–ª—å—à–∏—Ç–∏ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ —Å–∫–∏–Ω—É—Ç–∏ –∫–µ—à)

# Jobs (–∑–∞–≤–¥–∞–Ω–Ω—è) —è–∫—ñ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
jobs:
  # ========== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É (–ª—ñ–Ω—Ç–∏–Ω–≥, —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è) ==========
  lint:
    name: 'üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É'
    runs-on: ubuntu-latest
    
    steps:
      # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–¥ –∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
      - name: 'üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–¥—É'
        uses: actions/checkout@v4
      
      # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Node.js –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º npm
      - name: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
      - name: 'üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π'
        run: |
          npm ci
          cd frontend && npm ci
          cd ../server && npm ci
      
      # –ó–∞–ø—É—Å–∫–∞—î–º–æ ESLint –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
      - name: 'üîç ESLint –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞'
        run: npm run lint
      
      # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É
      - name: 'üíÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è'
        run: npm run format:check

  # ========== Type checking ==========
  typecheck:
    name: 'üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–¥—É'
        uses: actions/checkout@v4
      
      - name: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 'üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π'
        run: |
          npm ci
          cd frontend && npm ci
          cd ../server && npm ci
      
      # TypeScript type checking –¥–ª—è frontend
      - name: 'üîß TypeScript –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ (Frontend)'
        run: npm run typecheck:frontend
      
      # TypeScript type checking –¥–ª—è backend
      - name: 'üîß TypeScript –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ (Backend)'
        run: npm run typecheck:backend

  # ========== –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ==========
  test:
    name: 'üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è'
    runs-on: ubuntu-latest
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    env:
      # –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      JWT_ACCESS_SECRET: test-access-secret
      JWT_REFRESH_SECRET: test-refresh-secret
      NODE_ENV: test
    
    steps:
      - name: 'üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–¥—É'
        uses: actions/checkout@v4
      
      - name: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 'üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π'
        run: |
          npm ci
          cd frontend && npm ci
          cd ../server && npm ci
      
      # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
      - name: 'üóÑÔ∏è –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö'
        run: |
          cd server
          npx prisma generate
          npx prisma db push
      
      # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ frontend
      - name: 'üß™ –¢–µ—Å—Ç–∏ Frontend'
        run: npm run test:frontend -- --coverage --watchAll=false
      
      # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ backend
      - name: 'üß™ –¢–µ—Å—Ç–∏ Backend'
        run: npm run test:backend -- --coverage --watchAll=false
      
      # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤ –ø—Ä–æ –ø–æ–∫—Ä–∏—Ç—Ç—è –∫–æ–¥—É
      - name: 'üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –ø–æ–∫—Ä–∏—Ç—Ç—è'
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella

  # ========== –ó–±—ñ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç—É ==========
  build:
    name: 'üèóÔ∏è –ó–±—ñ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç—É'
    runs-on: ubuntu-latest
    needs: [lint, typecheck] # –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ª—ñ–Ω—Ç–∏–Ω–≥—É —Ç–∞ type-check
    
    steps:
      - name: 'üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–¥—É'
        uses: actions/checkout@v4
      
      - name: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 'üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π'
        run: |
          npm ci
          cd frontend && npm ci
          cd ../server && npm ci
      
      # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Prisma –∫–ª—ñ—î–Ω—Ç–∞
      - name: 'üîß –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Prisma –∫–ª—ñ—î–Ω—Ç–∞'
        run: |
          cd server
          npx prisma generate
      
      # –ó–±—ñ—Ä–∫–∞ frontend
      - name: 'üèóÔ∏è –ó–±—ñ—Ä–∫–∞ Frontend'
        run: npm run build:frontend
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'http://localhost:5000/api' }}
      
      # –ó–±—ñ—Ä–∫–∞ backend
      - name: 'üèóÔ∏è –ó–±—ñ—Ä–∫–∞ Backend'
        run: npm run build:backend
      
      # –ê—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–±—ñ—Ä–∫–∏
      - name: 'üì¶ –ê—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è Frontend –∑–±—ñ—Ä–∫–∏'
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7
      
      - name: 'üì¶ –ê—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è Backend –∑–±—ñ—Ä–∫–∏'
        uses: actions/upload-artifact@v3
        with:
          name: backend-build  
          path: server/dist/
          retention-days: 7

  # ========== –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏ ==========
  integration-tests:
    name: 'üîó –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏'
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: integration_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/integration_test_db
      JWT_ACCESS_SECRET: integration-test-access-secret
      JWT_REFRESH_SECRET: integration-test-refresh-secret
      NODE_ENV: test
    
    steps:
      - name: 'üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–¥—É'
        uses: actions/checkout@v4
      
      - name: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 'üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π'
        run: |
          npm ci
          cd server && npm ci
      
      - name: 'üóÑÔ∏è –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö'
        run: |
          cd server
          npx prisma generate
          npx prisma db push
          npx prisma db seed
      
      # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±—ñ—Ä–∫—É backend
      - name: 'üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Backend –∑–±—ñ—Ä–∫–∏'
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: server/dist/
      
      # –ó–∞–ø—É—Å–∫ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤
      - name: 'üîó –ó–∞–ø—É—Å–∫ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤'
        run: npm run test:flow
        timeout-minutes: 10

  # ========== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏ ==========
  security:
    name: 'üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–¥—É'
        uses: actions/checkout@v4
      
      - name: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 'üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π'
        run: |
          npm ci
          cd frontend && npm ci
          cd ../server && npm ci
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–æ–º–∏—Ö –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç–µ–π
      - name: 'üõ°Ô∏è –ê—É–¥–∏—Ç npm –ø–∞–∫–µ—Ç—ñ–≤'
        run: |
          npm audit --audit-level=moderate
          cd frontend && npm audit --audit-level=moderate
          cd ../server && npm audit --audit-level=moderate
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑ –¥–æ–ø–æ–º–æ–≥–æ—é Snyk (—è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)
      - name: 'üîç Snyk Security Scan'
        uses: snyk/actions/node@master
        continue-on-error: true # –ù–µ –∑—É–ø–∏–Ω—è—Ç–∏ –∑–±—ñ—Ä–∫—É –ø—Ä–∏ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—ñ –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç–µ–π
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ========== –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å ==========
  status:
    name: '‚úÖ –°—Ç–∞—Ç—É—Å –∑–±—ñ—Ä–∫–∏'
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, build, security]
    if: always() # –ó–∞–≤–∂–¥–∏ –∑–∞–ø—É—Å–∫–∞—Ç–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ jobs –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
    
    steps:
      - name: 'üìä –ó–≤—ñ—Ç –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏'
        run: |
          echo "## üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ CI/CD Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "| –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ | –°—Ç–∞—Ç—É—Å |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üîç –õ—ñ–Ω—Ç–∏–Ω–≥ | ${{ needs.lint.result == 'success' && '‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ' || '‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîß Type Check | ${{ needs.typecheck.result == 'success' && '‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ' || '‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üß™ –¢–µ—Å—Ç–∏ | ${{ needs.test.result == 'success' && '‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ' || '‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üèóÔ∏è –ó–±—ñ—Ä–∫–∞ | ${{ needs.build.result == 'success' && '‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ' || '‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üõ°Ô∏è –ë–µ–∑–ø–µ–∫–∞ | ${{ needs.security.result == 'success' && '‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ' || '‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è' }} |" >> $GITHUB_STEP_SUMMARY
      
      # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
      - name: '‚úÖ –£—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è'
        if: needs.lint.result == 'success' && needs.typecheck.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "üéâ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!"
          echo "–ö–æ–¥ –≥–æ—Ç–æ–≤–∏–π –¥–æ –¥–µ–ø–ª–æ—é üöÄ"
      
      - name: '‚ùå –ü—Ä–æ–≤–∞–ª –∑–±—ñ—Ä–∫–∏'
        if: needs.lint.result != 'success' || needs.typecheck.result != 'success' || needs.test.result != 'success' || needs.build.result != 'success'
        run: |
          echo "üí• –î–µ—è–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!"
          echo "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–¥ merge"
          exit 1