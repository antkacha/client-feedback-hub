name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend —Ç–µ—Å—Ç–∏ —Ç–∞ –∑–±—ñ—Ä–∫–∞
  backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Generate Prisma client
      run: |
        cd backend
        npx prisma generate
    
    - name: Run backend linting
      run: |
        cd backend
        npm run lint
    
    - name: Run backend tests
      run: |
        cd backend
        npm run test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
    
    - name: Build backend
      run: |
        cd backend
        npm run build

  # Frontend —Ç–µ—Å—Ç–∏ —Ç–∞ –∑–±—ñ—Ä–∫–∞
  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
    
    - name: Run frontend type checking
      run: |
        cd frontend
        npm run type-check
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_URL: https://api.example.com

  # Docker –∑–±—ñ—Ä–∫–∞ (—Ç—ñ–ª—å–∫–∏ –Ω–∞ main)
  docker:
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/cfh-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/cfh-backend:${{ github.sha }}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/cfh-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/cfh-frontend:${{ github.sha }}

  # –î–µ–ø–ª–æ–π (—Ç—ñ–ª—å–∫–∏ –Ω–∞ main)
  deploy:
    needs: [docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä"
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –¥–µ–ø–ª–æ—é –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
        # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —á–µ—Ä–µ–∑ SSH –∞–±–æ API –≤–∞—à–æ–≥–æ —Ö–æ—Å—Ç—ñ–Ω–≥—É