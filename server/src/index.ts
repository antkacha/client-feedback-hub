/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Express –¥–æ–¥–∞—Ç–æ–∫ —Ç–∞ –ø—ñ–¥–∫–ª—é—á–∞—î –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 */

import dotenv from 'dotenv';

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –ø–µ—Ä–µ–¥ —É—Å—ñ–º —ñ–Ω—à–∏–º
dotenv.config();

import app from './app';
import { PrismaClient } from '@prisma/client';
import { createLogger } from './utils/logger';

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª–æ–≥–≥–µ—Ä
const logger = createLogger('server');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Prisma –∫–ª—ñ—î–Ω—Ç
const prisma = new PrismaClient();

// –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
const PORT = process.env.PORT || 3001;

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ PostgreSQL —á–µ—Ä–µ–∑ Prisma
 */
async function connectToDatabase(): Promise<void> {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await prisma.$connect();
    logger.info('‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL');
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', error);
    process.exit(1);
  }
}

/**
 * –ì—Ä–µ–π—Å—Ñ—É–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
 * –ó–∞–∫—Ä–∏–≤–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î –ø—Ä–æ—Ü–µ—Å
 */
async function gracefulShutdown(signal: string): Promise<void> {
  logger.info(`üîÑ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª ${signal}. –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –≥—Ä–µ–π—Å—Ñ—É–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è...`);
  
  try {
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await prisma.$disconnect();
    logger.info('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–æ');
    
    process.exit(0);
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏:', error);
    process.exit(1);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
 */
async function startServer(): Promise<void> {
  try {
    // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await connectToDatabase();
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ HTTP —Å–µ—Ä–≤–µ—Ä
    const server = app.listen(PORT, () => {
      logger.info(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      logger.info(`üì± API –¥–æ—Å—Ç—É–ø–Ω–µ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: http://localhost:${PORT}/api`);
      logger.info(`üåç –°–µ—Ä–µ–¥–æ–≤–∏—â–µ: ${process.env.NODE_ENV || 'development'}`);
    });

    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≥—Ä–µ–π—Å—Ñ—É–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ–ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
    process.on('uncaughtException', (error) => {
      logger.error('‚ùå –ù–µ–ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
      process.exit(1);
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ–ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∏—Ö Promise rejection
    process.on('unhandledRejection', (reason, promise) => {
      logger.error('‚ùå –ù–µ–ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∏–π Promise rejection:', { reason, promise });
      process.exit(1);
    });

    return server;
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ñ–∞–π–ª –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É
if (require.main === module) {
  startServer();
}

export default startServer;