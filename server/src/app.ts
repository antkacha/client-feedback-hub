/**
 * –û—Å–Ω–æ–≤–Ω–∏–π Express –¥–æ–¥–∞—Ç–æ–∫
 * –ù–∞–ª–∞—à—Ç–æ–≤—É—î middleware, –º–∞—Ä—à—Ä—É—Ç–∏ —Ç–∞ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫
 */

import express, { Application } from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import cookieParser from 'cookie-parser';
import rateLimit from 'express-rate-limit';
import path from 'path';

// –Ü–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç—ñ–≤
import authRoutes from './routes/auth';
import projectRoutes from './routes/projects';
import feedbackRoutes from './routes/feedback';

// –Ü–º–ø–æ—Ä—Ç middleware
import { errorHandler } from './middleware/errorHandler';
import { notFoundHandler } from './middleware/notFoundHandler';
import { requestLogger } from './middleware/requestLogger';
import { createLogger } from './utils/logger';

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª–æ–≥–≥–µ—Ä
const logger = createLogger('app');

/**
 * –°—Ç–≤–æ—Ä—é—î —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î Express –¥–æ–¥–∞—Ç–æ–∫
 * @returns {Application} –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π Express –¥–æ–¥–∞—Ç–æ–∫
 */
function createApp(): Application {
  const app: Application = express();

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–≤—ñ—Ä–∏ –¥–æ –ø—Ä–æ–∫—Å—ñ (–¥–ª—è production –∑ reverse proxy)
  app.set('trust proxy', 1);

  // –ë–∞–∑–æ–≤—ñ middleware –¥–ª—è –±–µ–∑–ø–µ–∫–∏
  app.use(helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        styleSrc: ["'self'", "'unsafe-inline'"],
        scriptSrc: ["'self'"],
        imgSrc: ["'self'", "data:", "https:"],
        connectSrc: ["'self'"],
        fontSrc: ["'self'"],
        objectSrc: ["'none'"],
        mediaSrc: ["'self'"],
        frameSrc: ["'none'"],
      },
    },
    crossOriginEmbedderPolicy: false,
  }));

  // CORS –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
  app.use(cors({
    origin: process.env.FRONTEND_URL || 'http://localhost:5173',
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  }));

  // Rate limiting
  const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 —Ö–≤–∏–ª–∏–Ω
    max: process.env.NODE_ENV === 'production' ? 100 : 1000, // –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤
    message: {
      error: '–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –∑ —Ü—ñ—î—ó IP –∞–¥—Ä–µ—Å–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
    },
    standardHeaders: true,
    legacyHeaders: false,
  });
  app.use('/api', limiter);

  // –ü–∞—Ä—Å—ñ–Ω–≥ —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—ñ–≤
  app.use(express.json({ 
    limit: process.env.MAX_JSON_SIZE || '10mb',
  }));
  app.use(express.urlencoded({ 
    extended: true, 
    limit: process.env.MAX_URL_ENCODED_SIZE || '10mb',
  }));

  // Cookie parser
  app.use(cookieParser());

  // HTTP –ª–æ–≥—É–≤–∞–Ω–Ω—è
  if (process.env.NODE_ENV === 'production') {
    app.use(morgan('combined'));
  } else {
    app.use(morgan('dev'));
  }

  // –ö–∞—Å—Ç–æ–º–Ω–∏–π middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
  app.use(requestLogger);

  // –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ (–¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å, –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —Ç–æ—â–æ)
  app.use('/uploads', express.static(path.join(__dirname, '../../uploads')));

  // Health check endpoint
  app.get('/health', (req, res) => {
    res.status(200).json({
      status: 'OK',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      environment: process.env.NODE_ENV || 'development',
    });
  });

  // Swagger API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è (—Ç—ñ–ª—å–∫–∏ –≤ development —Ä–µ–∂–∏–º—ñ)
  if (process.env.NODE_ENV !== 'production') {
    try {
      const swaggerUi = require('swagger-ui-express');
      const { swaggerSpec } = require('./docs/swagger');
      
      app.use('/api/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec, {
        explorer: true,
        customCss: '.swagger-ui .topbar { display: none }',
        customSiteTitle: 'Client Feedback Hub API Documentation',
      }));
      
      // JSON endpoint –¥–ª—è swagger spec
      app.get('/api/docs.json', (req, res) => {
        res.setHeader('Content-Type', 'application/json');
        res.send(swaggerSpec);
      });
      
      logger.info('üìñ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ /api/docs');
    } catch (error) {
      logger.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é:', error);
    }
  }

  // API –º–∞—Ä—à—Ä—É—Ç–∏
  app.use('/api/auth', authRoutes);
  app.use('/api/projects', projectRoutes);
  app.use('/api/feedback', feedbackRoutes);

  // –ë–∞–∑–æ–≤–∏–π API endpoint
  app.get('/api', (req, res) => {
    res.json({
      message: 'Client Feedback Hub API',
      version: '1.0.0',
      documentation: process.env.NODE_ENV !== 'production' ? '/api/docs' : 'Not available in production',
      endpoints: {
        auth: '/api/auth',
        projects: '/api/projects',
        feedback: '/api/feedback',
      },
    });
  });

  // 404 handler –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
  app.use(notFoundHandler);

  // –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ (–º–∞—î –±—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–º)
  app.use(errorHandler);

  logger.info('‚úÖ Express –¥–æ–¥–∞—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');

  return app;
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
const app = createApp();

export default app;