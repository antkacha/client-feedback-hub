/**
 * –ö—Ä–∞—Å–∏–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ—ñ–¥–±–µ–∫—É –∑ –≥–∞—Ä–º–æ–Ω—ñ–π–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º
 * –ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Ñ–æ—Ä–º—É –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é, –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ —Ç–∞ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è–º–∏
 */

import React, { useState } from 'react';
import { useNavigate, useParams, Link } from 'react-router-dom';
import { 
  ArrowLeft, 
  Save, 
  Tag, 
  AlertTriangle, 
  MessageSquare, 
  Camera, 
  Paperclip, 
  X, 
  Plus,
  FileText
} from 'lucide-react';
import toast from 'react-hot-toast';

// –¢–∏–ø–∏ –¥–∞–Ω–∏—Ö
interface FeedbackForm {
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high' | 'critical';
  tags: string[];
  attachments: File[];
  reproductionSteps: string;
  expectedBehavior: string;
  actualBehavior: string;
  browserInfo: string;
  url: string;
}

interface FormErrors {
  title?: string;
  description?: string;
  general?: string;
}

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤
const priorityConfig = {
  low: { 
    label: '–ù–∏–∑—å–∫–∏–π', 
    color: '#6b7280', 
    bg: '#f3f4f6', 
    emoji: 'üü¢',
    description: '–ù–µ–∑–Ω–∞—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∞–±–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è'
  },
  medium: { 
    label: '–°–µ—Ä–µ–¥–Ω—ñ–π', 
    color: '#2563eb', 
    bg: '#dbeafe', 
    emoji: 'üü°',
    description: '–ü–æ–º—ñ—Ä–Ω–æ –≤–∞–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏'
  },
  high: { 
    label: '–í–∏—Å–æ–∫–∏–π', 
    color: '#d97706', 
    bg: '#fef3c7', 
    emoji: 'üü†',
    description: '–í–∞–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏, —â–æ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ UX'
  },
  critical: { 
    label: '–ö—Ä–∏—Ç–∏—á–Ω–∏–π', 
    color: '#dc2626', 
    bg: '#fee2e2', 
    emoji: 'üî¥',
    description: '–ë–ª–æ–∫—É—é—á—ñ –ø—Ä–æ–±–ª–µ–º–∏, –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –Ω–µ–≥–∞–π–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è'
  }
};

// –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Ç–µ–≥–∏
const predefinedTags = [
  'üêõ –±–∞–≥', '‚ú® —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å', 'üé® –¥–∏–∑–∞–π–Ω', 'üë§ UX', 'üì± –º–æ–±—ñ–ª—å–Ω–∏–π', 
  'üåê –±—Ä–∞—É–∑–µ—Ä', '‚ö° –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', '‚ôø –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å', 'üîí –±–µ–∑–ø–µ–∫–∞',
  'üìÑ –∫–æ–Ω—Ç–µ–Ω—Ç', 'üîó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è', 'üìä –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞'
];

export const NewFeedbackPage: React.FC = () => {
  const navigate = useNavigate();
  const { projectId } = useParams<{ projectId: string }>();
  
  const [form, setForm] = useState<FeedbackForm>({
    title: '',
    description: '',
    priority: 'medium',
    tags: [],
    attachments: [],
    reproductionSteps: '',
    expectedBehavior: '',
    actualBehavior: '',
    browserInfo: navigator.userAgent,
    url: window.location.href,
  });
  
  const [errors, setErrors] = useState<FormErrors>({});
  const [isLoading, setIsLoading] = useState(false);
  const [newTag, setNewTag] = useState('');

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏
  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};

    if (!form.title.trim()) {
      newErrors.title = '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º';
    } else if (form.title.trim().length < 5) {
      newErrors.title = '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤';
    }

    if (!form.description.trim()) {
      newErrors.description = '–û–ø–∏—Å —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º';
    } else if (form.description.trim().length < 10) {
      newErrors.description = '–û–ø–∏—Å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      toast.error('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —É —Ñ–æ—Ä–º—ñ');
      return;
    }

    setIsLoading(true);
    setErrors({});

    try {
      toast.loading('–°—Ç–≤–æ—Ä—é—é –≤—ñ–¥–≥—É–∫...', { id: 'create-feedback' });
      
      // TODO: –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ —á–µ—Ä–µ–∑ API
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      console.log('Feedback submitted:', form);
      
      toast.success('–í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! üéâ', { id: 'create-feedback' });
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–æ–µ–∫—Ç—É
      setTimeout(() => {
        navigate(`/projects/${projectId}/feedback`);
      }, 1000);
    } catch (error) {
      toast.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É', { id: 'create-feedback' });
      setErrors({
        general: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
      });
    } finally {
      setIsLoading(false);
    }
  };

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ —Ñ–æ—Ä–º–∏
  const updateField = <K extends keyof FeedbackForm>(
    field: K, 
    value: FeedbackForm[K]
  ) => {
    setForm(prev => ({ ...prev, [field]: value }));
    
    // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –ø–æ–ª—è
    if (errors[field as keyof FormErrors]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–≥—É
  const addTag = (tag: string) => {
    const cleanTag = tag.trim();
    if (!cleanTag || form.tags.includes(cleanTag)) return;
    
    updateField('tags', [...form.tags, cleanTag]);
    setNewTag('');
  };

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–≥—É
  const removeTag = (tagToRemove: string) => {
    updateField('tags', form.tags.filter(tag => tag !== tagToRemove));
  };

  // –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—ñ–≤
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    const validFiles = files.filter(file => file.size <= 10 * 1024 * 1024); // 10MB limit
    
    if (validFiles.length !== files.length) {
      toast.error('–î–µ—è–∫—ñ —Ñ–∞–π–ª–∏ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫—ñ (–º–∞–∫—Å. 10MB)');
    }
    
    updateField('attachments', [...form.attachments, ...validFiles]);
  };

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É
  const removeFile = (indexToRemove: number) => {
    updateField('attachments', form.attachments.filter((_, index) => index !== indexToRemove));
  };

  return (
    <div style={{ 
      minHeight: '100vh', 
      backgroundColor: '#f8fafc',
      fontFamily: 'Arial, sans-serif'
    }}>
      {/* –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å */}
      <header style={{
        backgroundColor: 'white',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        padding: '0 20px',
        position: 'sticky',
        top: 0,
        zIndex: 100
      }}>
        <div style={{
          maxWidth: '1200px',
          margin: '0 auto',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          height: '60px'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>
            <Link 
              to="/" 
              style={{
                color: '#2563eb',
                fontSize: '20px',
                fontWeight: 'bold',
                textDecoration: 'none',
                display: 'flex',
                alignItems: 'center',
                gap: '8px'
              }}
            >
              üé® Client Feedback Hub
            </Link>
            <nav style={{ display: 'flex', gap: '12px', alignItems: 'center' }}>
              <Link 
                to="/"
                style={{
                  color: '#64748b',
                  textDecoration: 'none',
                  padding: '6px 12px',
                  borderRadius: '6px',
                  fontSize: '14px',
                  transition: 'all 0.2s'
                }}
              >
                üìÅ –ü—Ä–æ–µ–∫—Ç–∏
              </Link>
              <span style={{ color: '#94a3b8', fontSize: '12px' }}>/</span>
              <Link 
                to={`/projects/${projectId}/feedback`}
                style={{
                  color: '#64748b',
                  textDecoration: 'none',
                  padding: '6px 12px',
                  borderRadius: '6px',
                  fontSize: '14px',
                  transition: 'all 0.2s'
                }}
              >
                üí¨ –í—ñ–¥–≥—É–∫–∏
              </Link>
              <span style={{ color: '#94a3b8', fontSize: '12px' }}>/</span>
              <span style={{
                color: '#2563eb',
                fontWeight: 'bold',
                padding: '6px 12px',
                backgroundColor: '#e0e7ff',
                borderRadius: '6px',
                fontSize: '14px'
              }}>
                ‚ú® –ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫
              </span>
            </nav>
          </div>

          <Link
            to={`/projects/${projectId}/feedback`}
            style={{
              padding: '8px 16px',
              backgroundColor: '#6b7280',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              fontSize: '14px',
              fontWeight: 'bold',
              textDecoration: 'none',
              display: 'flex',
              alignItems: 'center',
              gap: '6px',
              transition: 'background-color 0.2s'
            }}
            onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#4b5563'}
            onMouseLeave={(e) => e.currentTarget.style.backgroundColor = '#6b7280'}
          >
            <ArrowLeft style={{ width: '16px', height: '16px' }} />
            –ù–∞–∑–∞–¥
          </Link>
        </div>
      </header>

      {/* –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div style={{ padding: '20px', maxWidth: '1000px', margin: '0 auto' }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div style={{
          backgroundColor: 'white',
          borderRadius: '12px',
          padding: '24px',
          boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
          marginBottom: '20px'
        }}>
          <h1 style={{
            margin: '0 0 8px 0',
            fontSize: '24px',
            fontWeight: 'bold',
            color: '#1a202c',
            display: 'flex',
            alignItems: 'center',
            gap: '10px'
          }}>
            ‚ú® –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –≤—ñ–¥–≥—É–∫
          </h1>
          <p style={{
            color: '#64748b',
            margin: 0,
            fontSize: '16px',
            lineHeight: '1.5'
          }}>
            –î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É
          </p>
        </div>

        {/* –§–æ—Ä–º–∞ */}
        <form onSubmit={handleSubmit}>
          {/* –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ */}
          {errors.general && (
            <div style={{
              backgroundColor: '#fee2e2',
              border: '1px solid #fecaca',
              borderRadius: '12px',
              padding: '16px',
              marginBottom: '20px',
              display: 'flex',
              alignItems: 'center',
              gap: '12px'
            }}>
              <AlertTriangle style={{ width: '20px', height: '20px', color: '#dc2626' }} />
              <p style={{ color: '#dc2626', margin: 0, fontSize: '14px' }}>
                {errors.general}
              </p>
            </div>
          )}

          {/* –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '12px',
            padding: '24px',
            boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
            marginBottom: '20px'
          }}>
            <h3 style={{
              margin: '0 0 20px 0',
              fontSize: '18px',
              fontWeight: 'bold',
              color: '#1a202c',
              display: 'flex',
              alignItems: 'center',
              gap: '8px'
            }}>
              <FileText style={{ width: '20px', height: '20px', color: '#2563eb' }} />
              –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            </h3>

            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ—ñ–¥–±–µ–∫—É */}
            <div style={{ marginBottom: '20px' }}>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: 'bold',
                color: '#374151',
                marginBottom: '8px'
              }}>
                –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ñ–¥–≥—É–∫—É *
              </label>
              <input
                type="text"
                value={form.title}
                onChange={(e) => updateField('title', e.target.value)}
                style={{
                  width: '100%',
                  padding: '12px 16px',
                  border: errors.title ? '2px solid #dc2626' : '2px solid #e5e7eb',
                  borderRadius: '8px',
                  fontSize: '16px',
                  outline: 'none',
                  transition: 'border-color 0.2s',
                  backgroundColor: errors.title ? '#fef2f2' : 'white',
                  boxSizing: 'border-box'
                }}
                placeholder="–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é..."
                onFocus={(e) => {
                  if (!errors.title) e.currentTarget.style.borderColor = '#2563eb';
                }}
                onBlur={(e) => {
                  if (!errors.title) e.currentTarget.style.borderColor = '#e5e7eb';
                }}
                autoFocus
              />
              {errors.title && (
                <p style={{ 
                  color: '#dc2626', 
                  fontSize: '12px', 
                  marginTop: '4px',
                  margin: '4px 0 0 0'
                }}>
                  {errors.title}
                </p>
              )}
            </div>

            {/* –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç */}
            <div style={{ marginBottom: '20px' }}>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: 'bold',
                color: '#374151',
                marginBottom: '12px'
              }}>
                –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
              </label>
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                gap: '12px'
              }}>
                {Object.entries(priorityConfig).map(([value, config]) => (
                  <label
                    key={value}
                    style={{
                      display: 'flex',
                      flexDirection: 'column',
                      padding: '16px',
                      border: form.priority === value ? '2px solid #2563eb' : '2px solid #e5e7eb',
                      borderRadius: '8px',
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      backgroundColor: form.priority === value ? '#eff6ff' : 'white',
                      boxShadow: form.priority === value ? '0 0 0 2px rgba(37, 99, 235, 0.2)' : 'none'
                    }}
                    onMouseEnter={(e) => {
                      if (form.priority !== value) {
                        e.currentTarget.style.borderColor = '#cbd5e1';
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (form.priority !== value) {
                        e.currentTarget.style.borderColor = '#e5e7eb';
                      }
                    }}
                  >
                    <input
                      type="radio"
                      name="priority"
                      value={value}
                      checked={form.priority === value}
                      onChange={(e) => updateField('priority', e.target.value as any)}
                      style={{ display: 'none' }}
                    />
                    <div style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '8px',
                      marginBottom: '6px'
                    }}>
                      <span style={{ fontSize: '20px' }}>{config.emoji}</span>
                      <span style={{
                        fontSize: '16px',
                        fontWeight: 'bold',
                        color: config.color
                      }}>
                        {config.label}
                      </span>
                    </div>
                    <p style={{
                      fontSize: '12px',
                      color: '#6b7280',
                      margin: 0,
                      lineHeight: '1.4'
                    }}>
                      {config.description}
                    </p>
                  </label>
                ))}
              </div>
            </div>

            {/* –î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å */}
            <div style={{ marginBottom: '20px' }}>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: 'bold',
                color: '#374151',
                marginBottom: '8px'
              }}>
                –î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å *
              </label>
              <textarea
                value={form.description}
                onChange={(e) => updateField('description', e.target.value)}
                rows={6}
                style={{
                  width: '100%',
                  padding: '12px 16px',
                  border: errors.description ? '2px solid #dc2626' : '2px solid #e5e7eb',
                  borderRadius: '8px',
                  fontSize: '14px',
                  outline: 'none',
                  transition: 'border-color 0.2s',
                  backgroundColor: errors.description ? '#fef2f2' : 'white',
                  resize: 'vertical',
                  minHeight: '120px',
                  boxSizing: 'border-box'
                }}
                placeholder="–î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –≤–∫–ª—é—á–∞—é—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è...&#10;&#10;–ù–∞–ø—Ä–∏–∫–ª–∞–¥:&#10;‚Ä¢ –©–æ —Å–∞–º–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è?&#10;‚Ä¢ –ö–æ–ª–∏ —Ü–µ —Ç—Ä–∞–ø–ª—è—î—Ç—å—Å—è?&#10;‚Ä¢ –Ø–∫—ñ –Ω–∞—Å–ª—ñ–¥–∫–∏ —Ü–µ –º–∞—î?&#10;‚Ä¢ –Ø–∫ –±–∏ –≤–∏ —Ö–æ—Ç—ñ–ª–∏, —â–æ–± —Ü–µ –ø—Ä–∞—Ü—é–≤–∞–ª–æ?"
                onFocus={(e) => {
                  if (!errors.description) e.currentTarget.style.borderColor = '#2563eb';
                }}
                onBlur={(e) => {
                  if (!errors.description) e.currentTarget.style.borderColor = '#e5e7eb';
                }}
              />
              {errors.description && (
                <p style={{ 
                  color: '#dc2626', 
                  fontSize: '12px', 
                  marginTop: '4px',
                  margin: '4px 0 0 0'
                }}>
                  {errors.description}
                </p>
              )}
            </div>

            {/* URL —Å—Ç–æ—Ä—ñ–Ω–∫–∏ */}
            <div>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: 'bold',
                color: '#374151',
                marginBottom: '8px'
              }}>
                URL —Å—Ç–æ—Ä—ñ–Ω–∫–∏
              </label>
              <input
                type="url"
                value={form.url}
                onChange={(e) => updateField('url', e.target.value)}
                style={{
                  width: '100%',
                  padding: '12px 16px',
                  border: '2px solid #e5e7eb',
                  borderRadius: '8px',
                  fontSize: '14px',
                  outline: 'none',
                  transition: 'border-color 0.2s',
                  boxSizing: 'border-box'
                }}
                placeholder="https://example.com/page"
                onFocus={(e) => e.currentTarget.style.borderColor = '#2563eb'}
                onBlur={(e) => e.currentTarget.style.borderColor = '#e5e7eb'}
              />
              <p style={{
                fontSize: '12px',
                color: '#6b7280',
                marginTop: '4px',
                margin: '4px 0 0 0'
              }}>
                üí° –í–∫–∞–∂—ñ—Ç—å URL —Å—Ç–æ—Ä—ñ–Ω–∫–∏, –¥–µ –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞
              </p>
            </div>
          </div>

          {/* –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '12px',
            padding: '24px',
            boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
            marginBottom: '20px'
          }}>
            <h3 style={{
              margin: '0 0 20px 0',
              fontSize: '18px',
              fontWeight: 'bold',
              color: '#1a202c',
              display: 'flex',
              alignItems: 'center',
              gap: '8px'
            }}>
              <MessageSquare style={{ width: '20px', height: '20px', color: '#2563eb' }} />
              –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ
            </h3>

            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
              gap: '20px'
            }}>
              {/* –ö—Ä–æ–∫–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è */}
              <div>
                <label style={{
                  display: 'block',
                  fontSize: '14px',
                  fontWeight: 'bold',
                  color: '#374151',
                  marginBottom: '8px'
                }}>
                  üîÑ –ö—Ä–æ–∫–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
                </label>
                <textarea
                  value={form.reproductionSteps}
                  onChange={(e) => updateField('reproductionSteps', e.target.value)}
                  rows={4}
                  style={{
                    width: '100%',
                    padding: '12px 16px',
                    border: '2px solid #e5e7eb',
                    borderRadius: '8px',
                    fontSize: '14px',
                    outline: 'none',
                    transition: 'border-color 0.2s',
                    resize: 'vertical',
                    boxSizing: 'border-box'
                  }}
                  placeholder="1. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É...&#10;2. –ù–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É...&#10;3. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É...&#10;4. –ü–æ–±–∞—á–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É..."
                  onFocus={(e) => e.currentTarget.style.borderColor = '#2563eb'}
                  onBlur={(e) => e.currentTarget.style.borderColor = '#e5e7eb'}
                />
              </div>

              {/* –û—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ */}
              <div>
                <label style={{
                  display: 'block',
                  fontSize: '14px',
                  fontWeight: 'bold',
                  color: '#374151',
                  marginBottom: '8px'
                }}>
                  ‚úÖ –û—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞
                </label>
                <textarea
                  value={form.expectedBehavior}
                  onChange={(e) => updateField('expectedBehavior', e.target.value)}
                  rows={4}
                  style={{
                    width: '100%',
                    padding: '12px 16px',
                    border: '2px solid #e5e7eb',
                    borderRadius: '8px',
                    fontSize: '14px',
                    outline: 'none',
                    transition: 'border-color 0.2s',
                    resize: 'vertical',
                    boxSizing: 'border-box'
                  }}
                  placeholder="–©–æ –º–∞—î –≤—ñ–¥–±—É—Ç–∏—Å—è –≤ —ñ–¥–µ–∞–ª—å–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É..."
                  onFocus={(e) => e.currentTarget.style.borderColor = '#2563eb'}
                  onBlur={(e) => e.currentTarget.style.borderColor = '#e5e7eb'}
                />
              </div>

              {/* –§–∞–∫—Ç–∏—á–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ */}
              <div>
                <label style={{
                  display: 'block',
                  fontSize: '14px',
                  fontWeight: 'bold',
                  color: '#374151',
                  marginBottom: '8px'
                }}>
                  ‚ùå –§–∞–∫—Ç–∏—á–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞
                </label>
                <textarea
                  value={form.actualBehavior}
                  onChange={(e) => updateField('actualBehavior', e.target.value)}
                  rows={4}
                  style={{
                    width: '100%',
                    padding: '12px 16px',
                    border: '2px solid #e5e7eb',
                    borderRadius: '8px',
                    fontSize: '14px',
                    outline: 'none',
                    transition: 'border-color 0.2s',
                    resize: 'vertical',
                    boxSizing: 'border-box'
                  }}
                  placeholder="–©–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ, —â–æ –Ω–µ —Ç–∞–∫..."
                  onFocus={(e) => e.currentTarget.style.borderColor = '#2563eb'}
                  onBlur={(e) => e.currentTarget.style.borderColor = '#e5e7eb'}
                />
              </div>

              {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±—Ä–∞—É–∑–µ—Ä */}
              <div>
                <label style={{
                  display: 'block',
                  fontSize: '14px',
                  fontWeight: 'bold',
                  color: '#374151',
                  marginBottom: '8px'
                }}>
                  üåê –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±—Ä–∞—É–∑–µ—Ä
                </label>
                <textarea
                  value={form.browserInfo}
                  onChange={(e) => updateField('browserInfo', e.target.value)}
                  rows={4}
                  style={{
                    width: '100%',
                    padding: '12px 16px',
                    border: '2px solid #e5e7eb',
                    borderRadius: '8px',
                    fontSize: '12px',
                    outline: 'none',
                    transition: 'border-color 0.2s',
                    resize: 'vertical',
                    fontFamily: 'monospace',
                    boxSizing: 'border-box'
                  }}
                  placeholder="–ë—Ä–∞—É–∑–µ—Ä, –≤–µ—Ä—Å—ñ—è, –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞..."
                  onFocus={(e) => e.currentTarget.style.borderColor = '#2563eb'}
                  onBlur={(e) => e.currentTarget.style.borderColor = '#e5e7eb'}
                />
                <p style={{
                  fontSize: '11px',
                  color: '#6b7280',
                  marginTop: '4px',
                  margin: '4px 0 0 0'
                }}>
                  üí° –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞
                </p>
              </div>
            </div>
          </div>

          {/* –¢–µ–≥–∏ */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '12px',
            padding: '24px',
            boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
            marginBottom: '20px'
          }}>
            <h3 style={{
              margin: '0 0 16px 0',
              fontSize: '18px',
              fontWeight: 'bold',
              color: '#1a202c',
              display: 'flex',
              alignItems: 'center',
              gap: '8px'
            }}>
              <Tag style={{ width: '20px', height: '20px', color: '#2563eb' }} />
              –¢–µ–≥–∏
            </h3>

            {/* –û–±—Ä–∞–Ω—ñ —Ç–µ–≥–∏ */}
            {form.tags.length > 0 && (
              <div style={{
                display: 'flex',
                flexWrap: 'wrap',
                gap: '8px',
                marginBottom: '16px'
              }}>
                {form.tags.map((tag) => (
                  <span
                    key={tag}
                    style={{
                      display: 'inline-flex',
                      alignItems: 'center',
                      gap: '6px',
                      padding: '6px 12px',
                      backgroundColor: '#e0e7ff',
                      color: '#3730a3',
                      borderRadius: '20px',
                      fontSize: '14px',
                      fontWeight: '500'
                    }}
                  >
                    {tag}
                    <button
                      type="button"
                      onClick={() => removeTag(tag)}
                      style={{
                        padding: '2px',
                        backgroundColor: 'transparent',
                        border: 'none',
                        borderRadius: '50%',
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        transition: 'background-color 0.2s'
                      }}
                      onMouseEnter={(e) => e.currentTarget.style.backgroundColor = 'rgba(59, 48, 163, 0.2)'}
                      onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
                    >
                      <X style={{ width: '14px', height: '14px' }} />
                    </button>
                  </span>
                ))}
              </div>
            )}

            {/* –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥—É */}
            <div style={{
              display: 'flex',
              gap: '8px',
              marginBottom: '16px'
            }}>
              <input
                type="text"
                value={newTag}
                onChange={(e) => setNewTag(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    e.preventDefault();
                    addTag(newTag);
                  }
                }}
                style={{
                  flex: 1,
                  padding: '10px 14px',
                  border: '2px solid #e5e7eb',
                  borderRadius: '8px',
                  fontSize: '14px',
                  outline: 'none',
                  transition: 'border-color 0.2s'
                }}
                placeholder="–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ–≥..."
                onFocus={(e) => e.currentTarget.style.borderColor = '#2563eb'}
                onBlur={(e) => e.currentTarget.style.borderColor = '#e5e7eb'}
              />
              <button
                type="button"
                onClick={() => addTag(newTag)}
                disabled={!newTag.trim()}
                style={{
                  padding: '10px 16px',
                  backgroundColor: newTag.trim() ? '#2563eb' : '#d1d5db',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  fontSize: '14px',
                  fontWeight: 'bold',
                  cursor: newTag.trim() ? 'pointer' : 'not-allowed',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  transition: 'background-color 0.2s'
                }}
                onMouseEnter={(e) => {
                  if (newTag.trim()) e.currentTarget.style.backgroundColor = '#1d4ed8';
                }}
                onMouseLeave={(e) => {
                  if (newTag.trim()) e.currentTarget.style.backgroundColor = '#2563eb';
                }}
              >
                <Plus style={{ width: '16px', height: '16px' }} />
              </button>
            </div>

            {/* –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Ç–µ–≥–∏ */}
            <div>
              <p style={{
                fontSize: '14px',
                color: '#6b7280',
                marginBottom: '8px',
                margin: '0 0 8px 0'
              }}>
                üí° –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Ç–µ–≥–∏:
              </p>
              <div style={{
                display: 'flex',
                flexWrap: 'wrap',
                gap: '8px'
              }}>
                {predefinedTags
                  .filter(tag => !form.tags.includes(tag))
                  .map((tag) => (
                    <button
                      key={tag}
                      type="button"
                      onClick={() => addTag(tag)}
                      style={{
                        padding: '6px 12px',
                        backgroundColor: '#f3f4f6',
                        border: '1px solid #d1d5db',
                        borderRadius: '16px',
                        fontSize: '13px',
                        color: '#374151',
                        cursor: 'pointer',
                        transition: 'all 0.2s'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.backgroundColor = '#e5e7eb';
                        e.currentTarget.style.borderColor = '#9ca3af';
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.backgroundColor = '#f3f4f6';
                        e.currentTarget.style.borderColor = '#d1d5db';
                      }}
                    >
                      {tag}
                    </button>
                  ))
                }
              </div>
            </div>
          </div>

          {/* –ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '12px',
            padding: '24px',
            boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
            marginBottom: '20px'
          }}>
            <h3 style={{
              margin: '0 0 16px 0',
              fontSize: '18px',
              fontWeight: 'bold',
              color: '#1a202c',
              display: 'flex',
              alignItems: 'center',
              gap: '8px'
            }}>
              <Paperclip style={{ width: '20px', height: '20px', color: '#2563eb' }} />
              –ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è
            </h3>

            {/* –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ */}
            {form.attachments.length > 0 && (
              <div style={{
                marginBottom: '16px',
                display: 'flex',
                flexDirection: 'column',
                gap: '8px'
              }}>
                {form.attachments.map((file, index) => (
                  <div
                    key={index}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'space-between',
                      padding: '12px 16px',
                      backgroundColor: '#f8fafc',
                      border: '1px solid #e2e8f0',
                      borderRadius: '8px'
                    }}
                  >
                    <div style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '8px'
                    }}>
                      <Paperclip style={{ width: '16px', height: '16px', color: '#6b7280' }} />
                      <span style={{
                        fontSize: '14px',
                        color: '#374151',
                        fontWeight: '500'
                      }}>
                        {file.name}
                      </span>
                      <span style={{
                        fontSize: '12px',
                        color: '#6b7280',
                        backgroundColor: '#e5e7eb',
                        padding: '2px 6px',
                        borderRadius: '4px'
                      }}>
                        {(file.size / 1024).toFixed(1)} KB
                      </span>
                    </div>
                    <button
                      type="button"
                      onClick={() => removeFile(index)}
                      style={{
                        padding: '4px',
                        backgroundColor: 'transparent',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        transition: 'background-color 0.2s'
                      }}
                      onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#fee2e2'}
                      onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
                    >
                      <X style={{ width: '16px', height: '16px', color: '#dc2626' }} />
                    </button>
                  </div>
                ))}
              </div>
            )}

            {/* –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ */}
            <div>
              <label>
                <input
                  type="file"
                  multiple
                  onChange={handleFileChange}
                  accept="image/*,.pdf,.doc,.docx,.txt"
                  style={{ display: 'none' }}
                />
                <div style={{
                  border: '2px dashed #cbd5e1',
                  borderRadius: '12px',
                  padding: '32px',
                  textAlign: 'center',
                  cursor: 'pointer',
                  transition: 'all 0.2s',
                  backgroundColor: '#fafafa'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.borderColor = '#94a3b8';
                  e.currentTarget.style.backgroundColor = '#f1f5f9';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.borderColor = '#cbd5e1';
                  e.currentTarget.style.backgroundColor = '#fafafa';
                }}
                >
                  <Camera style={{
                    width: '48px',
                    height: '48px',
                    color: '#94a3b8',
                    margin: '0 auto 12px'
                  }} />
                  <p style={{
                    fontSize: '16px',
                    color: '#374151',
                    marginBottom: '8px',
                    margin: '0 0 8px 0'
                  }}>
                    üìé –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—ñ–≤ –∞–±–æ –ø–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å —ó—Ö —Å—é–¥–∏
                  </p>
                  <p style={{
                    fontSize: '12px',
                    color: '#6b7280',
                    margin: 0
                  }}>
                    –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, PDF, –¥–æ–∫—É–º–µ–Ω—Ç–∏ (–º–∞–∫—Å. 10 –ú–ë –∫–æ–∂–µ–Ω)
                  </p>
                </div>
              </label>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥—ñ–π */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '12px',
            padding: '24px',
            boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            gap: '16px'
          }}>
            <Link
              to={`/projects/${projectId}/feedback`}
              style={{
                padding: '12px 24px',
                backgroundColor: '#f3f4f6',
                color: '#374151',
                border: '2px solid #d1d5db',
                borderRadius: '8px',
                fontSize: '16px',
                fontWeight: 'bold',
                textDecoration: 'none',
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                transition: 'all 0.2s'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.backgroundColor = '#e5e7eb';
                e.currentTarget.style.borderColor = '#9ca3af';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.backgroundColor = '#f3f4f6';
                e.currentTarget.style.borderColor = '#d1d5db';
              }}
            >
              –°–∫–∞—Å—É–≤–∞—Ç–∏
            </Link>

            <button
              type="submit"
              disabled={isLoading}
              style={{
                padding: '12px 32px',
                backgroundColor: isLoading ? '#9ca3af' : '#10b981',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                fontSize: '16px',
                fontWeight: 'bold',
                cursor: isLoading ? 'not-allowed' : 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                transition: 'background-color 0.2s',
                opacity: isLoading ? 0.7 : 1
              }}
              onMouseEnter={(e) => {
                if (!isLoading) e.currentTarget.style.backgroundColor = '#059669';
              }}
              onMouseLeave={(e) => {
                if (!isLoading) e.currentTarget.style.backgroundColor = '#10b981';
              }}
            >
              {isLoading ? (
                <>
                  <div style={{
                    width: '16px',
                    height: '16px',
                    border: '2px solid #ffffff40',
                    borderTop: '2px solid #ffffff',
                    borderRadius: '50%',
                    animation: 'spin 1s linear infinite'
                  }}></div>
                  –°—Ç–≤–æ—Ä—é—é –≤—ñ–¥–≥—É–∫...
                </>
              ) : (
                <>
                  <Save style={{ width: '16px', height: '16px' }} />
                  ‚ú® –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–¥–≥—É–∫
                </>
              )}
            </button>
          </div>
        </form>
      </div>

      <style>
        {`
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        `}
      </style>
    </div>
  );
};