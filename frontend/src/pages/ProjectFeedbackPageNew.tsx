/**
 * –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É —Ñ—ñ–¥–±–µ–∫—É –ø—Ä–æ–µ–∫—Ç—É –∑ –∫—Ä–∞—Å–∏–≤–∏–º –¥–∏–∑–∞–π–Ω–æ–º
 * –ü–æ–∫–∞–∑—É—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –®–Ü –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞
 */

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { 
  Search, 
  MessageSquare, 
  Brain,
  AlertTriangle,
  CheckCircle,
  Clock,
  User,
  Calendar,
  Tag,
  Eye,
  EyeOff,
  RefreshCw
} from 'lucide-react';
import toast from 'react-hot-toast';

// –¢–∏–ø–∏ –¥–∞–Ω–∏—Ö
interface Feedback {
  id: string;
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high' | 'critical';
  status: 'new' | 'in-progress' | 'completed' | 'rejected';
  tags: string[];
  createdAt: string;
  updatedAt: string;
  author: {
    id: string;
    name: string;
    email: string;
    role: 'client' | 'designer' | 'admin';
  };
  // –®–Ü-–∞–Ω–∞–ª—ñ–∑
  aiAnalysis?: {
    designerTasks: string[];
    priority: 'low' | 'medium' | 'high' | 'critical';
    estimatedHours: number;
    suggestions: string[];
    analysisScore: number; // 0-100
    generatedAt: string;
  };
  attachments?: {
    id: string;
    fileName: string;
    fileUrl: string;
    fileType: string;
  }[];
}

interface Project {
  id: string;
  name: string;
  description: string;
  status: string;
}

// –§—ñ–ª—å—Ç—Ä–∏
interface FeedbackFilters {
  status: string;
  priority: string;
  author: string;
  search: string;
  showAiAnalysis: boolean;
}

const priorityConfig = {
  low: { label: '–ù–∏–∑—å–∫–∏–π', color: '#6b7280', bg: '#f3f4f6', emoji: 'üü¢' },
  medium: { label: '–°–µ—Ä–µ–¥–Ω—ñ–π', color: '#2563eb', bg: '#dbeafe', emoji: 'üü°' },
  high: { label: '–í–∏—Å–æ–∫–∏–π', color: '#d97706', bg: '#fef3c7', emoji: 'üü†' },
  critical: { label: '–ö—Ä–∏—Ç–∏—á–Ω–∏–π', color: '#dc2626', bg: '#fee2e2', emoji: 'üî¥' }
};

const statusConfig = {
  new: { label: '–ù–æ–≤–∏–π', color: '#2563eb', bg: '#dbeafe', icon: MessageSquare, emoji: 'üÜï' },
  'in-progress': { label: '–í —Ä–æ–±–æ—Ç—ñ', color: '#d97706', bg: '#fef3c7', icon: Clock, emoji: '‚è≥' },
  completed: { label: '–í–∏–∫–æ–Ω–∞–Ω–æ', color: '#059669', bg: '#d1fae5', icon: CheckCircle, emoji: '‚úÖ' },
  rejected: { label: '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ', color: '#dc2626', bg: '#fee2e2', icon: AlertTriangle, emoji: '‚ùå' }
};

export const ProjectFeedbackPage: React.FC = () => {
  const { projectId } = useParams<{ projectId: string }>();
  const navigate = useNavigate();
  
  const [project, setProject] = useState<Project | null>(null);
  const [feedbacks, setFeedbacks] = useState<Feedback[]>([]);
  const [filteredFeedbacks, setFilteredFeedbacks] = useState<Feedback[]>([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState<FeedbackFilters>({
    status: 'all',
    priority: 'all',
    author: 'all',
    search: '',
    showAiAnalysis: true
  });

  // Mock –¥–∞–Ω—ñ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
  const mockProject: Project = {
    id: projectId || '1',
    name: 'üåü Landing Page –¥–ª—è –°—Ç–∞—Ä—Ç–∞–ø—É',
    description: '–°—É—á–∞—Å–Ω–∏–π –ª–µ–Ω–¥—ñ–Ω–≥ –¥–ª—è AI —Å—Ç–∞—Ä—Ç–∞–ø—É –∑ –≥—Ä–∞–¥—ñ—î–Ω—Ç–∞–º–∏ —Ç–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è–º–∏',
    status: 'active'
  };

  const mockFeedbacks: Feedback[] = [
    {
      id: '1',
      title: '–ö–Ω–æ–ø–∫–∞ "–ó–∞–º–æ–≤–∏—Ç–∏ –¥–µ–º–æ" –Ω–µ –¥—É–∂–µ –ø–æ–º—ñ—Ç–Ω–∞',
      description: '–ú–µ–Ω—ñ –∑–¥–∞—î—Ç—å—Å—è, —â–æ –≥–æ–ª–æ–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞ Call-to-Action –Ω–µ –¥—É–∂–µ –≤–∏–¥—ñ–ª—è—î—Ç—å—Å—è –Ω–∞ —Ñ–æ–Ω—ñ. –ö–ª—ñ—î–Ω—Ç–∏ –º–æ–∂—É—Ç—å —ó—ó –Ω–µ –ø–æ–º—ñ—Ç–∏—Ç–∏. –•–æ—Ç—ñ–ª–æ—Å—è –± —â–æ—Å—å —è—Å–∫—Ä–∞–≤—ñ—à–µ.',
      priority: 'high',
      status: 'new',
      tags: ['CTA', '–¥–∏–∑–∞–π–Ω', '–∫–æ–Ω–≤–µ—Ä—Å—ñ—è'],
      createdAt: '2024-01-15T10:30:00Z',
      updatedAt: '2024-01-15T10:30:00Z',
      author: {
        id: 'client1',
        name: '–ê–Ω–Ω–∞ –ö–æ–≤–∞–ª–µ–Ω–∫–æ',
        email: 'anna@startup.com',
        role: 'client'
      },
      aiAnalysis: {
        designerTasks: [
          '–ó–±—ñ–ª—å—à–∏—Ç–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "–ó–∞–º–æ–≤–∏—Ç–∏ –¥–µ–º–æ" –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ñ–æ–Ω—É',
          '–î–æ–¥–∞—Ç–∏ —Ç—ñ–Ω—å –∞–±–æ –æ–±–≤–æ–¥–∫—É –¥–ª—è –∫—Ä–∞—â–æ—ó –≤–∏–¥–∏–º–æ—Å—Ç—ñ',
          '–†–æ–∑–≥–ª—è–Ω—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —è—Å–∫—Ä–∞–≤—ñ—à–∏—Ö –∫–æ–ª—å–æ—Ä—ñ–≤ (–ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π, –∑–µ–ª–µ–Ω–∏–π)',
          '–ü—Ä–æ–≤–µ—Å—Ç–∏ A/B —Ç–µ—Å—Ç —Ä—ñ–∑–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∫–Ω–æ–ø–∫–∏',
          '–î–æ–¥–∞—Ç–∏ –º—ñ–∫—Ä–æ–∞–Ω—ñ–º–∞—Ü—ñ—é –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ –¥–ª—è –ø—Ä–∏–≤–µ—Ä–Ω–µ–Ω–Ω—è —É–≤–∞–≥–∏'
        ],
        priority: 'high',
        estimatedHours: 3,
        suggestions: [
          '–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø—Ä–∏–Ω—Ü–∏–ø –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è UX',
          '–î–æ–¥–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–ª—ñ–∫—É',
          '–†–æ–∑–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—É –∫–Ω–æ–ø–∫–∏ –≤ —ñ–Ω—à—ñ–π —á–∞—Å—Ç–∏–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏'
        ],
        analysisScore: 87,
        generatedAt: '2024-01-15T10:35:00Z'
      }
    },
    {
      id: '2',
      title: '–¢–µ–∫—Å—Ç –≤–∞–∂–∫–æ —á–∏—Ç–∞—Ç–∏ –Ω–∞ –º–æ–±—ñ–ª—å–Ω–æ–º—É',
      description: '–ö–æ–ª–∏ –¥–∏–≤–ª—é—Å—è —Å–∞–π—Ç –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ, —Ç–µ–∫—Å—Ç –¥—É–∂–µ –¥—Ä—ñ–±–Ω–∏–π —ñ –≤–∞–∂–∫–æ —á–∏—Ç–∞—î—Ç—å—Å—è. –û—Å–æ–±–ª–∏–≤–æ –≤ —Å–µ–∫—Ü—ñ—ó –∑ –æ–ø–∏—Å–æ–º –ø—Ä–æ–¥—É–∫—Ç—É. –ú–æ–∂–µ –∑—Ä–æ–±–∏—Ç–∏ –±—ñ–ª—å—à–µ?',
      priority: 'medium',
      status: 'in-progress',
      tags: ['–º–æ–±—ñ–ª—å–Ω–∏–π', '—Ç–∏–ø–æ–≥—Ä–∞—Ñ—ñ–∫–∞', 'accessibility'],
      createdAt: '2024-01-14T15:20:00Z',
      updatedAt: '2024-01-15T09:15:00Z',
      author: {
        id: 'client2',
        name: '–ü–µ—Ç—Ä–æ –ú–µ–ª—å–Ω–∏–∫',
        email: 'petro@company.com',
        role: 'client'
      },
      aiAnalysis: {
        designerTasks: [
          '–ó–±—ñ–ª—å—à–∏—Ç–∏ –±–∞–∑–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –¥–æ –º—ñ–Ω—ñ–º—É–º 16px',
          '–ü–æ–∫—Ä–∞—â–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–ª—ñ–Ω\'—è–∂ (line-height) –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ',
          '–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ñ–æ–Ω—É',
          '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—É —Ç–∏–ø–æ–≥—Ä–∞—Ñ—ñ—á–Ω—É —à–∫–∞–ª—É'
        ],
        priority: 'high',
        estimatedHours: 4,
        suggestions: [
          '–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ CSS clamp() –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ —à—Ä–∏—Ñ—Ç—ñ–≤',
          '–î–æ–¥–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑–±—ñ–ª—å—à—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç',
          '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–∞–π—Ç –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å WCAG 2.1 AA'
        ],
        analysisScore: 92,
        generatedAt: '2024-01-14T15:25:00Z'
      }
    }
  ];

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        
        // TODO: –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ API –≤–∏–∫–ª–∏–∫–∏
        await new Promise(resolve => setTimeout(resolve, 800));
        
        setProject(mockProject);
        setFeedbacks(mockFeedbacks);
        setFilteredFeedbacks(mockFeedbacks);
      } catch (error) {
        toast.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');
        console.error('Error loading feedback:', error);
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, [projectId]);

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ñ—ñ–¥–±–µ–∫—ñ–≤
  useEffect(() => {
    let filtered = [...feedbacks];

    // –§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
    if (filters.status !== 'all') {
      filtered = filtered.filter(f => f.status === filters.status);
    }

    // –§—ñ–ª—å—Ç—Ä –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
    if (filters.priority !== 'all') {
      filtered = filtered.filter(f => f.priority === filters.priority);
    }

    // –ü–æ—à—É–∫
    if (filters.search) {
      const searchLower = filters.search.toLowerCase();
      filtered = filtered.filter(f => 
        f.title.toLowerCase().includes(searchLower) ||
        f.description.toLowerCase().includes(searchLower) ||
        f.tags.some(tag => tag.toLowerCase().includes(searchLower))
      );
    }

    setFilteredFeedbacks(filtered);
  }, [feedbacks, filters]);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É
  const updateFilter = <K extends keyof FeedbackFilters>(
    key: K,
    value: FeedbackFilters[K]
  ) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  };

  // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –®–Ü –∞–Ω–∞–ª—ñ–∑—É
  const regenerateAiAnalysis = async (feedbackId: string) => {
    try {
      toast.loading('–ì–µ–Ω–µ—Ä—É—é –Ω–æ–≤–∏–π –®–Ü-–∞–Ω–∞–ª—ñ–∑...', { id: 'ai-analysis' });
      
      // TODO: –†–µ–∞–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫ –®–Ü API –∑ feedbackId
      console.log('Regenerating AI analysis for feedback:', feedbackId);
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      toast.success('–®–Ü-–∞–Ω–∞–ª—ñ–∑ –æ–Ω–æ–≤–ª–µ–Ω–æ', { id: 'ai-analysis' });
    } catch (error) {
      toast.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ–∑—É', { id: 'ai-analysis' });
    }
  };

  if (loading) {
    return (
      <div style={{ 
        minHeight: '100vh', 
        backgroundColor: '#f8fafc',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontFamily: 'Arial, sans-serif'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{
            width: '60px',
            height: '60px',
            border: '4px solid #e5e7eb',
            borderTop: '4px solid #2563eb',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto 20px'
          }}></div>
          <p style={{ color: '#64748b', fontSize: '16px' }}>            ‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –≤—ñ–¥–≥—É–∫–∏...</p>
        </div>
        <style>
          {`
            @keyframes spin {
              0% { transform: rotate(0deg); }
              100% { transform: rotate(360deg); }
            }
          `}
        </style>
      </div>
    );
  }

  if (!project) {
    return (
      <div style={{ 
        minHeight: '100vh', 
        backgroundColor: '#f8fafc',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontFamily: 'Arial, sans-serif'
      }}>
        <div style={{ textAlign: 'center' }}>
          <p style={{ color: '#64748b', fontSize: '16px', marginBottom: '20px' }}>
            –ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
          </p>
          <button 
            onClick={() => navigate('/projects')}
            style={{
              padding: '12px 24px',
              backgroundColor: '#2563eb',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              fontSize: '14px',
              fontWeight: 'bold',
              cursor: 'pointer'
            }}
          >
            –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤
          </button>
        </div>
      </div>
    );
  }

  return (
    <div style={{ 
      minHeight: '100vh', 
      backgroundColor: '#f8fafc',
      fontFamily: 'Arial, sans-serif'
    }}>
      {/* –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å */}
      <header style={{
        backgroundColor: 'white',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        padding: '0 20px',
        position: 'sticky',
        top: 0,
        zIndex: 100
      }}>
        <div style={{
          maxWidth: '1200px',
          margin: '0 auto',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          height: '60px'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>
            <Link 
              to="/" 
              style={{
                color: '#2563eb',
                fontSize: '20px',
                fontWeight: 'bold',
                textDecoration: 'none',
                display: 'flex',
                alignItems: 'center',
                gap: '8px'
              }}
            >
              üé® Client Feedback Hub
            </Link>
            <nav style={{ display: 'flex', gap: '12px', alignItems: 'center' }}>
              <Link 
                to="/"
                style={{
                  color: '#64748b',
                  textDecoration: 'none',
                  padding: '6px 12px',
                  borderRadius: '6px',
                  fontSize: '14px',
                  transition: 'all 0.2s'
                }}
              >
                üìÅ –ü—Ä–æ–µ–∫—Ç–∏
              </Link>
              <span style={{ color: '#94a3b8', fontSize: '12px' }}>/</span>
              <span style={{
                color: '#2563eb',
                fontWeight: 'bold',
                padding: '6px 12px',
                backgroundColor: '#e0e7ff',
                borderRadius: '6px',
                fontSize: '14px'
              }}>
                üí¨ {project.name}
              </span>
            </nav>
          </div>

          <button
            onClick={() => navigate(`/projects/${projectId}/feedback/new`)}
            style={{
              padding: '8px 16px',
              backgroundColor: '#10b981',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              fontSize: '14px',
              fontWeight: 'bold',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '6px',
              transition: 'background-color 0.2s'
            }}
            onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#059669'}
            onMouseLeave={(e) => e.currentTarget.style.backgroundColor = '#10b981'}
          >
            ‚ûï –î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫
          </button>
        </div>
      </header>

      {/* –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div style={{ padding: '20px', maxWidth: '1200px', margin: '0 auto' }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div style={{
          backgroundColor: 'white',
          borderRadius: '12px',
          padding: '24px',
          boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
          marginBottom: '20px'
        }}>
          <h1 style={{
            margin: '0 0 8px 0',
            fontSize: '24px',
            fontWeight: 'bold',
            color: '#1a202c',
            display: 'flex',
            alignItems: 'center',
            gap: '10px'
          }}>
            üí¨ –í—ñ–¥–≥—É–∫–∏ –ø—Ä–æ–µ–∫—Ç—É
          </h1>
          <p style={{
            color: '#64748b',
            margin: 0,
            fontSize: '14px'
          }}>
            {filteredFeedbacks.length} –∑ {feedbacks.length} –∑–∞–ø–∏—Å—ñ–≤
          </p>
        </div>

        {/* –§—ñ–ª—å—Ç—Ä–∏ */}
        <div style={{
          backgroundColor: 'white',
          borderRadius: '12px',
          padding: '20px',
          boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
          marginBottom: '20px'
        }}>
          <div style={{
            display: 'flex',
            gap: '16px',
            alignItems: 'center',
            flexWrap: 'wrap'
          }}>
            {/* –ü–æ—à—É–∫ */}
            <div style={{ position: 'relative', flex: '1', minWidth: '250px' }}>
              <Search style={{
                position: 'absolute',
                left: '12px',
                top: '50%',
                transform: 'translateY(-50%)',
                width: '16px',
                height: '16px',
                color: '#9ca3af'
              }} />
              <input
                type="text"
                value={filters.search}
                onChange={(e) => updateFilter('search', e.target.value)}
                placeholder="            üîç –ü–æ—à—É–∫ –ø–æ –≤—ñ–¥–≥—É–∫–∞–º..."
                style={{
                  width: '100%',
                  paddingLeft: '40px',
                  paddingRight: '12px',
                  paddingTop: '10px',
                  paddingBottom: '10px',
                  border: '2px solid #e5e7eb',
                  borderRadius: '8px',
                  fontSize: '14px',
                  outline: 'none',
                  transition: 'border-color 0.2s',
                  boxSizing: 'border-box'
                }}
                onFocus={(e) => e.currentTarget.style.borderColor = '#2563eb'}
                onBlur={(e) => e.currentTarget.style.borderColor = '#e5e7eb'}
              />
            </div>

            {/* –§—ñ–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å—É */}
            <select
              value={filters.status}
              onChange={(e) => updateFilter('status', e.target.value)}
              style={{
                padding: '10px 12px',
                border: '2px solid #e5e7eb',
                borderRadius: '8px',
                fontSize: '14px',
                outline: 'none',
                cursor: 'pointer',
                backgroundColor: 'white'
              }}
            >
              <option value="all">üìã –í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
              <option value="new">üÜï –ù–æ–≤—ñ</option>
              <option value="in-progress">‚è≥ –í —Ä–æ–±–æ—Ç—ñ</option>
              <option value="completed">‚úÖ –í–∏–∫–æ–Ω–∞–Ω—ñ</option>
              <option value="rejected">‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω—ñ</option>
            </select>

            {/* –§—ñ–ª—å—Ç—Ä –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É */}
            <select
              value={filters.priority}
              onChange={(e) => updateFilter('priority', e.target.value)}
              style={{
                padding: '10px 12px',
                border: '2px solid #e5e7eb',
                borderRadius: '8px',
                fontSize: '14px',
                outline: 'none',
                cursor: 'pointer',
                backgroundColor: 'white'
              }}
            >
              <option value="all">üìä –í—Å—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏</option>
              <option value="critical">üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∏–π</option>
              <option value="high">üü† –í–∏—Å–æ–∫–∏–π</option>
              <option value="medium">üü° –°–µ—Ä–µ–¥–Ω—ñ–π</option>
              <option value="low">üü¢ –ù–∏–∑—å–∫–∏–π</option>
            </select>

            {/* –ü–µ—Ä–µ–º–∏–∫–∞—á –®–Ü-–∞–Ω–∞–ª—ñ–∑—É */}
            <button
              onClick={() => updateFilter('showAiAnalysis', !filters.showAiAnalysis)}
              style={{
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                padding: '10px 16px',
                border: '2px solid',
                borderRadius: '8px',
                fontSize: '14px',
                fontWeight: 'bold',
                cursor: 'pointer',
                transition: 'all 0.2s',
                borderColor: filters.showAiAnalysis ? '#2563eb' : '#e5e7eb',
                backgroundColor: filters.showAiAnalysis ? '#eff6ff' : 'white',
                color: filters.showAiAnalysis ? '#2563eb' : '#64748b'
              }}
            >
              {filters.showAiAnalysis ? (
                <Eye style={{ width: '16px', height: '16px' }} />
              ) : (
                <EyeOff style={{ width: '16px', height: '16px' }} />
              )}
              ü§ñ –®–Ü-–∞–Ω–∞–ª—ñ–∑
            </button>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ —Ñ—ñ–¥–±–µ–∫—É */}
        <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
          {filteredFeedbacks.length === 0 ? (
            <div style={{
              textAlign: 'center',
              padding: '60px 20px',
              backgroundColor: 'white',
              borderRadius: '12px',
              boxShadow: '0 1px 3px rgba(0,0,0,0.1)'
            }}>
              <div style={{ fontSize: '64px', marginBottom: '20px' }}>üí¨</div>
              <h3 style={{ 
                color: '#1a202c', 
                marginBottom: '12px',
                fontSize: '20px',
                fontWeight: 'bold'
              }}>
                –í—ñ–¥–≥—É–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
              </h3>
              <p style={{ 
                color: '#64748b', 
                marginBottom: '24px',
                fontSize: '16px',
                lineHeight: '1.5'
              }}>
                {feedbacks.length === 0 
                  ? '–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –≤—ñ–¥–≥—É–∫—É –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É.'
                  : '–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ –ø–æ—à—É–∫—É.'
                }
              </p>
              <button 
                onClick={() => navigate(`/projects/${projectId}/feedback/new`)}
                style={{
                  padding: '12px 24px',
                  backgroundColor: '#2563eb',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  fontSize: '16px',
                  fontWeight: 'bold',
                  cursor: 'pointer'
                }}
              >
                ‚ú® –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—à–∏–π –≤—ñ–¥–≥—É–∫
              </button>
            </div>
          ) : (
            filteredFeedbacks.map((feedback) => (
              <FeedbackCard 
                key={feedback.id} 
                feedback={feedback} 
                showAiAnalysis={filters.showAiAnalysis}
                onRegenerateAi={() => regenerateAiAnalysis(feedback.id)}
              />
            ))
          )}
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–∫–∏ —Ñ—ñ–¥–±–µ–∫—É
interface FeedbackCardProps {
  feedback: Feedback;
  showAiAnalysis: boolean;
  onRegenerateAi: () => void;
}

const FeedbackCard: React.FC<FeedbackCardProps> = ({ 
  feedback, 
  showAiAnalysis, 
  onRegenerateAi 
}) => {
  const [expandedAi, setExpandedAi] = useState(false);

  const priorityInfo = priorityConfig[feedback.priority];
  const statusInfo = statusConfig[feedback.status];

  return (
    <div style={{
      backgroundColor: 'white',
      borderRadius: '12px',
      boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
      overflow: 'hidden',
      border: '1px solid #e5e7eb'
    }}>
      {/* –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
      <div style={{ padding: '24px' }}>
        <div style={{
          display: 'flex',
          alignItems: 'flex-start',
          justifyContent: 'space-between',
          marginBottom: '16px'
        }}>
          <div style={{ flex: 1 }}>
            <h3 style={{
              margin: '0 0 8px 0',
              fontSize: '18px',
              fontWeight: 'bold',
              color: '#1a202c',
              lineHeight: '1.4'
            }}>
              {feedback.title}
            </h3>
            <p style={{
              color: '#64748b',
              lineHeight: '1.6',
              margin: '0 0 16px 0',
              fontSize: '15px'
            }}>
              {feedback.description}
            </p>
          </div>
          
          <div style={{
            display: 'flex',
            flexDirection: 'column',
            gap: '8px',
            marginLeft: '20px',
            alignItems: 'flex-end'
          }}>
            {/* –°—Ç–∞—Ç—É—Å */}
            <span style={{
              display: 'inline-flex',
              alignItems: 'center',
              gap: '6px',
              padding: '6px 12px',
              borderRadius: '20px',
              fontSize: '12px',
              fontWeight: 'bold',
              backgroundColor: statusInfo.bg,
              color: statusInfo.color
            }}>
              {statusInfo.emoji} {statusInfo.label}
            </span>
            
            {/* –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç */}
            <span style={{
              display: 'inline-flex',
              alignItems: 'center',
              gap: '6px',
              padding: '6px 12px',
              borderRadius: '20px',
              fontSize: '12px',
              fontWeight: 'bold',
              backgroundColor: priorityInfo.bg,
              color: priorityInfo.color
            }}>
              {priorityInfo.emoji} {priorityInfo.label}
            </span>
          </div>
        </div>

        {/* –ú–µ—Ç–∞-—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'between',
          gap: '20px',
          fontSize: '14px',
          color: '#6b7280',
          marginBottom: '16px'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
            <User style={{ width: '14px', height: '14px' }} />
            <span>{feedback.author.name}</span>
          </div>
          <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
            <Calendar style={{ width: '14px', height: '14px' }} />
            <span>{new Date(feedback.createdAt).toLocaleDateString('uk-UA')}</span>
          </div>
        </div>

        {/* –¢–µ–≥–∏ */}
        {feedback.tags.length > 0 && (
          <div style={{
            display: 'flex',
            flexWrap: 'wrap',
            gap: '8px'
          }}>
            {feedback.tags.map((tag) => (
              <span 
                key={tag}
                style={{
                  display: 'inline-flex',
                  alignItems: 'center',
                  gap: '4px',
                  padding: '4px 8px',
                  backgroundColor: '#f3f4f6',
                  color: '#374151',
                  borderRadius: '12px',
                  fontSize: '12px',
                  fontWeight: '500'
                }}
              >
                <Tag style={{ width: '12px', height: '12px' }} />
                {tag}
              </span>
            ))}
          </div>
        )}
      </div>

      {/* –®–Ü-–∞–Ω–∞–ª—ñ–∑ */}
      {showAiAnalysis && feedback.aiAnalysis && (
        <div style={{
          borderTop: '1px solid #e5e7eb',
          background: 'linear-gradient(135deg, #fef7ff 0%, #f0f9ff 100%)'
        }}>
          <div style={{ padding: '20px' }}>
            <div style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              marginBottom: '16px'
            }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                <Brain style={{ width: '20px', height: '20px', color: '#7c3aed' }} />
                <h4 style={{
                  margin: 0,
                  fontSize: '16px',
                  fontWeight: 'bold',
                  color: '#7c3aed'
                }}>
                  ü§ñ –®–Ü-–∞–Ω–∞–ª—ñ–∑ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
                </h4>
                <span style={{
                  fontSize: '11px',
                  backgroundColor: '#e0e7ff',
                  color: '#3730a3',
                  padding: '2px 8px',
                  borderRadius: '12px',
                  fontWeight: 'bold'
                }}>
                  –¢–æ—á–Ω—ñ—Å—Ç—å: {feedback.aiAnalysis.analysisScore}%
                </span>
              </div>
              
              <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                <button
                  onClick={onRegenerateAi}
                  style={{
                    padding: '6px',
                    backgroundColor: 'transparent',
                    border: 'none',
                    borderRadius: '6px',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    transition: 'background-color 0.2s'
                  }}
                  title="–†–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑"
                  onMouseEnter={(e) => e.currentTarget.style.backgroundColor = 'rgba(124, 58, 237, 0.1)'}
                  onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
                >
                  <RefreshCw style={{ width: '16px', height: '16px', color: '#7c3aed' }} />
                </button>
                
                <button
                  onClick={() => setExpandedAi(!expandedAi)}
                  style={{
                    fontSize: '12px',
                    color: '#7c3aed',
                    fontWeight: 'bold',
                    backgroundColor: 'transparent',
                    border: 'none',
                    cursor: 'pointer',
                    padding: '4px 8px',
                    borderRadius: '4px',
                    transition: 'background-color 0.2s'
                  }}
                  onMouseEnter={(e) => e.currentTarget.style.backgroundColor = 'rgba(124, 58, 237, 0.1)'}
                  onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
                >
                  {expandedAi ? '–ó–≥–æ—Ä–Ω—É—Ç–∏ ‚Üë' : '–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ ‚Üì'}
                </button>
              </div>
            </div>

            {/* –ö—Ä–∞—Ç–∫–∏–π –æ–≥–ª—è–¥ */}
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',
              gap: '12px',
              marginBottom: '16px'
            }}>
              <div style={{
                backgroundColor: 'white',
                borderRadius: '8px',
                padding: '12px',
                border: '1px solid #e0e7ff'
              }}>
                <div style={{
                  fontSize: '11px',
                  color: '#6b7280',
                  marginBottom: '4px',
                  fontWeight: '500'
                }}>
                  –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –®–Ü
                </div>
                <div style={{
                  fontWeight: 'bold',
                  color: priorityConfig[feedback.aiAnalysis.priority].color,
                  fontSize: '14px'
                }}>
                  {priorityConfig[feedback.aiAnalysis.priority].emoji} {priorityConfig[feedback.aiAnalysis.priority].label}
                </div>
              </div>
              
              <div style={{
                backgroundColor: 'white',
                borderRadius: '8px',
                padding: '12px',
                border: '1px solid #e0e7ff'
              }}>
                <div style={{
                  fontSize: '11px',
                  color: '#6b7280',
                  marginBottom: '4px',
                  fontWeight: '500'
                }}>
                  –û—Ü—ñ–Ω–∫–∞ —á–∞—Å—É
                </div>
                <div style={{
                  fontWeight: 'bold',
                  color: '#1f2937',
                  fontSize: '14px'
                }}>
                  ‚è±Ô∏è {feedback.aiAnalysis.estimatedHours} –≥–æ–¥
                </div>
              </div>
              
              <div style={{
                backgroundColor: 'white',
                borderRadius: '8px',
                padding: '12px',
                border: '1px solid #e0e7ff'
              }}>
                <div style={{
                  fontSize: '11px',
                  color: '#6b7280',
                  marginBottom: '4px',
                  fontWeight: '500'
                }}>
                  –ó–∞–≤–¥–∞–Ω—å
                </div>
                <div style={{
                  fontWeight: 'bold',
                  color: '#1f2937',
                  fontSize: '14px'
                }}>
                  üìã {feedback.aiAnalysis.designerTasks.length}
                </div>
              </div>
            </div>

            {/* –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ */}
            {expandedAi && (
              <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                {/* –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞ */}
                <div style={{
                  backgroundColor: 'white',
                  borderRadius: '8px',
                  padding: '16px',
                  border: '1px solid #e0e7ff'
                }}>
                  <h5 style={{
                    margin: '0 0 12px 0',
                    fontSize: '14px',
                    fontWeight: 'bold',
                    color: '#1f2937',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '6px'
                  }}>
                    <CheckCircle style={{ width: '16px', height: '16px', color: '#059669' }} />
                    ‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞
                  </h5>
                  <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                    {feedback.aiAnalysis.designerTasks.map((task, index) => (
                      <div key={index} style={{
                        display: 'flex',
                        alignItems: 'flex-start',
                        gap: '8px',
                        fontSize: '14px'
                      }}>
                        <span style={{
                          backgroundColor: '#2563eb',
                          color: 'white',
                          borderRadius: '50%',
                          width: '20px',
                          height: '20px',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: '11px',
                          fontWeight: 'bold',
                          flexShrink: 0,
                          marginTop: '2px'
                        }}>
                          {index + 1}
                        </span>
                        <span style={{ color: '#374151', lineHeight: '1.5' }}>
                          {task}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó */}
                <div style={{
                  backgroundColor: 'white',
                  borderRadius: '8px',
                  padding: '16px',
                  border: '1px solid #e0e7ff'
                }}>
                  <h5 style={{
                    margin: '0 0 12px 0',
                    fontSize: '14px',
                    fontWeight: 'bold',
                    color: '#1f2937',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '6px'
                  }}>
                    <Brain style={{ width: '16px', height: '16px', color: '#7c3aed' }} />
                    üí° –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
                  </h5>
                  <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
                    {feedback.aiAnalysis.suggestions.map((suggestion, index) => (
                      <div key={index} style={{
                        display: 'flex',
                        alignItems: 'flex-start',
                        gap: '8px',
                        fontSize: '14px'
                      }}>
                        <span style={{
                          color: '#7c3aed',
                          fontSize: '16px',
                          lineHeight: '1',
                          marginTop: '2px'
                        }}>
                          ‚Ä¢
                        </span>
                        <span style={{ color: '#374151', lineHeight: '1.5' }}>
                          {suggestion}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* –ú–µ—Ç–∞-—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
                <div style={{
                  fontSize: '11px',
                  color: '#6b7280',
                  borderTop: '1px solid #e0e7ff',
                  paddingTop: '12px',
                  fontStyle: 'italic'
                }}>
                  üïí –ê–Ω–∞–ª—ñ–∑ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {new Date(feedback.aiAnalysis.generatedAt).toLocaleString('uk-UA')}
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};