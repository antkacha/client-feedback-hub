/**
 * –¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ flow:
 * register ‚Üí create project ‚Üí create feedback
 * 
 * –ó–∞–ø—É—Å–∫: npm run test:flow –∞–±–æ node -r ts-node/register test-flow.ts
 */

import axios, { AxiosError } from 'axios';

// –ë–∞–∑–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
const API_BASE_URL = 'http://localhost:5000/api';
const TEST_USER = {
  email: `test-${Date.now()}@example.com`,
  password: 'TestPassword123!',
  firstName: '–¢–µ—Å—Ç',
  lastName: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
};

// –°—Ç–≤–æ—Ä—é—î–º–æ axios —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—é
const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  validateStatus: () => true, // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫–∏ –Ω–∞ HTTP —Å—Ç–∞—Ç—É—Å–∏
});

/**
 * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
 */
function log(message: string, data?: any) {
  console.log(`üîÑ ${message}`);
  if (data) {
    console.log('   –î–∞–Ω—ñ:', JSON.stringify(data, null, 2));
  }
}

/**
 * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
 */
function handleError(error: AxiosError | Error, step: string) {
  console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∫—Ä–æ—Ü—ñ "${step}":`, error.message);
  if (axios.isAxiosError(error) && error.response) {
    console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
    console.error('   –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.data);
  }
  process.exit(1);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
 */
async function testLocalFlow() {
  let accessToken = '';
  let projectId = '';
  let feedbackId = '';

  console.log('üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ flow...\n');

  try {
    // 1. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    log('–ö—Ä–æ–∫ 1: –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', TEST_USER);
    const registerResponse = await api.post('/auth/register', TEST_USER);
    
    if (registerResponse.status !== 201) {
      throw new Error(`–û—á—ñ–∫—É–≤–∞–≤—Å—è —Å—Ç–∞—Ç—É—Å 201, –æ—Ç—Ä–∏–º–∞–ª–∏ ${registerResponse.status}`);
    }

    const { user, accessToken: token } = registerResponse.data.data;
    accessToken = token;
    
    console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π');
    console.log(`   ID: ${user.id}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   –¢–æ–∫–µ–Ω: ${accessToken.substring(0, 20)}...`);

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    api.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;

    // 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É
    log('–ö—Ä–æ–∫ 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É');
    const projectData = {
      name: '–¢–µ—Å—Ç–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç',
      description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ flow',
      url: 'https://test-project.example.com',
    };

    const createProjectResponse = await api.post('/projects', projectData);
    
    if (createProjectResponse.status !== 201) {
      throw new Error(`–û—á—ñ–∫—É–≤–∞–≤—Å—è —Å—Ç–∞—Ç—É—Å 201, –æ—Ç—Ä–∏–º–∞–ª–∏ ${createProjectResponse.status}`);
    }

    const project = createProjectResponse.data.data;
    projectId = project.id;
    
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    console.log(`   ID: ${project.id}`);
    console.log(`   –ù–∞–∑–≤–∞: ${project.name}`);
    console.log(`   –û–ø–∏—Å: ${project.description}`);

    // 3. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è feedback
    log('–ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è feedback');
    const feedbackData = {
      title: '–¢–µ—Å—Ç–æ–≤–∏–π feedback',
      description: '–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π feedback –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏. –¢—É—Ç –æ–ø–∏—Å—É—î—Ç—å—Å—è –ø—Ä–æ–±–ª–µ–º–∞ –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è.',
      priority: 'MEDIUM',
      category: 'bug',
      pageUrl: 'https://test-project.example.com/page1',
      browserInfo: 'Chrome 120.0.0.0 on macOS',
    };

    const createFeedbackResponse = await api.post(`/projects/${projectId}/feedback`, feedbackData);
    
    if (createFeedbackResponse.status !== 201) {
      throw new Error(`–û—á—ñ–∫—É–≤–∞–≤—Å—è —Å—Ç–∞—Ç—É—Å 201, –æ—Ç—Ä–∏–º–∞–ª–∏ ${createFeedbackResponse.status}`);
    }

    const feedback = createFeedbackResponse.data.data;
    feedbackId = feedback.id;
    
    console.log('‚úÖ Feedback —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    console.log(`   ID: ${feedback.id}`);
    console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${feedback.title}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${feedback.status}`);
    console.log(`   –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${feedback.priority}`);

    // 4. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É feedback –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É
    log('–ö—Ä–æ–∫ 4: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É feedback');
    const getFeedbackResponse = await api.get(`/projects/${projectId}/feedback`);
    
    if (getFeedbackResponse.status !== 200) {
      throw new Error(`–û—á—ñ–∫—É–≤–∞–≤—Å—è —Å—Ç–∞—Ç—É—Å 200, –æ—Ç—Ä–∏–º–∞–ª–∏ ${getFeedbackResponse.status}`);
    }

    const feedbackList = getFeedbackResponse.data.data;
    
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ feedback —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ');
    console.log(`   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${feedbackList.data.length}`);
    console.log(`   –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è: —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ${feedbackList.pagination.page} –∑ ${feedbackList.pagination.totalPages}`);

    // 5. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π feedback
    log('–ö—Ä–æ–∫ 5: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π feedback');
    const getFeedbackDetailsResponse = await api.get(`/feedback/${feedbackId}`);
    
    if (getFeedbackDetailsResponse.status !== 200) {
      throw new Error(`–û—á—ñ–∫—É–≤–∞–≤—Å—è —Å—Ç–∞—Ç—É—Å 200, –æ—Ç—Ä–∏–º–∞–ª–∏ ${getFeedbackDetailsResponse.status}`);
    }

    const feedbackDetails = getFeedbackDetailsResponse.data.data;
    
    console.log('‚úÖ –î–µ—Ç–∞–ª—ñ feedback —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ');
    console.log(`   ID: ${feedbackDetails.id}`);
    console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${feedbackDetails.title}`);
    console.log(`   –°—Ç–≤–æ—Ä–µ–Ω–æ: ${feedbackDetails.createdAt}`);

    // 6. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É feedback
    log('–ö—Ä–æ–∫ 6: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É feedback');
    const updateFeedbackResponse = await api.put(`/feedback/${feedbackId}`, {
      status: 'IN_PROGRESS',
    });
    
    if (updateFeedbackResponse.status !== 200) {
      throw new Error(`–û—á—ñ–∫—É–≤–∞–≤—Å—è —Å—Ç–∞—Ç—É—Å 200, –æ—Ç—Ä–∏–º–∞–ª–∏ ${updateFeedbackResponse.status}`);
    }

    const updatedFeedback = updateFeedbackResponse.data.data;
    
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å feedback —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ');
    console.log(`   –ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å: ${updatedFeedback.status}`);

    // 7. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    log('–ö—Ä–æ–∫ 7: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è');
    const commentData = {
      content: '–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ feedback. –î—è–∫—É—é –∑–∞ –∑–≤—ñ—Ç!',
    };

    const createCommentResponse = await api.post(`/feedback/${feedbackId}/comments`, commentData);
    
    if (createCommentResponse.status !== 201) {
      throw new Error(`–û—á—ñ–∫—É–≤–∞–≤—Å—è —Å—Ç–∞—Ç—É—Å 201, –æ—Ç—Ä–∏–º–∞–ª–∏ ${createCommentResponse.status}`);
    }

    const comment = createCommentResponse.data.data;
    
    console.log('‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    console.log(`   ID: ${comment.id}`);
    console.log(`   –¢–µ–∫—Å—Ç: ${comment.content}`);

    // 8. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
    log('–ö—Ä–æ–∫ 8: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤');
    const getCommentsResponse = await api.get(`/feedback/${feedbackId}/comments`);
    
    if (getCommentsResponse.status !== 200) {
      throw new Error(`–û—á—ñ–∫—É–≤–∞–≤—Å—è —Å—Ç–∞—Ç—É—Å 200, –æ—Ç—Ä–∏–º–∞–ª–∏ ${getCommentsResponse.status}`);
    }

    const comments = getCommentsResponse.data.data;
    
    console.log('‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ');
    console.log(`   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${comments.length}`);

    // –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    console.log('\nüéâ –£—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!');
    console.log('üìã –ü—ñ–¥—Å—É–º–æ–∫:');
    console.log(`   ‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: ${user.email}`);
    console.log(`   ‚Ä¢ –ü—Ä–æ–µ–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${project.name} (ID: ${projectId})`);
    console.log(`   ‚Ä¢ Feedback —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${feedback.title} (ID: ${feedbackId})`);
    console.log(`   ‚Ä¢ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ: ${comment.content.substring(0, 30)}...`);
    console.log('\n‚ú® –õ–æ–∫–∞–ª—å–Ω–∏–π flow –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ!');

  } catch (error) {
    if (axios.isAxiosError(error)) {
      handleError(error, 'HTTP –∑–∞–ø–∏—Ç');
    } else {
      handleError(error as Error, '–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
 */
async function checkServerHealth() {
  try {
    log('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞...');
    const response = await api.get('/health', {
      baseURL: 'http://localhost:5000', // –±–µ–∑ /api
    });
    
    if (response.status === 200) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π');
      console.log('   –°—Ç–∞—Ç—É—Å:', response.data.status);
      console.log('   –°–µ—Ä–µ–¥–æ–≤–∏—â–µ:', response.data.environment);
      return true;
    } else {
      console.log(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
      return false;
    }
  } catch (error) {
    console.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑\'—î–¥–Ω–∞—Ç–∏—Å—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º');
    console.log('   –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ http://localhost:5000');
    return false;
  }
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
 */
async function main() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Client Feedback Hub API\n');

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  const serverAvailable = await checkServerHealth();
  if (!serverAvailable) {
    console.log('\nüí° –î–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞ –≤–∏–∫–æ–Ω–∞–π—Ç–µ:');
    console.log('   cd server && npm run dev');
    process.exit(1);
  }

  console.log(); // –ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è

  // –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ç–µ—Å—Ç–∏
  await testLocalFlow();
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
if (require.main === module) {
  main().catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  });
}

export { testLocalFlow, checkServerHealth };