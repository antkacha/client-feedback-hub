import { RateLimiterMemory } from 'rate-limiter-flexible';
import { Request, Response, NextFunction } from 'express';

// –û—Å–Ω–æ–≤–Ω–∏–π rate limiter –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
const generalLimiter = new RateLimiterMemory({
  keyPrefix: 'general',
  points: 100, // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤
  duration: 60, // –ó–∞ 60 —Å–µ–∫—É–Ω–¥
});

// –°—Ç—Ä–æ–≥—ñ—à–∏–π limiter –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
const authLimiter = new RateLimiterMemory({
  keyPrefix: 'auth',
  points: 10, // 10 —Å–ø—Ä–æ–± (–∑–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏)
  duration: 300, // –ó–∞ 5 —Ö–≤–∏–ª–∏–Ω
  blockDuration: 300, // –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω (–∑–º–µ–Ω—à–µ–Ω–æ)
});

// Limiter –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É (–ø—Ä–æ—î–∫—Ç–∏, —Ñ—ñ–¥–±–µ–∫–∏)
const createLimiter = new RateLimiterMemory({
  keyPrefix: 'create',
  points: 20, // 20 —Å—Ç–≤–æ—Ä–µ–Ω—å
  duration: 60, // –ó–∞ —Ö–≤–∏–ª–∏–Ω—É
});

// –ó–∞–≥–∞–ª—å–Ω–∏–π rate limiter middleware
export const rateLimiter = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const key = req.ip || 'unknown';
    await generalLimiter.consume(key);
    next();
  } catch (rejRes: any) {
    const secs = Math.round(rejRes.msBeforeNext / 1000) || 1;
    res.set('Retry-After', String(secs));
    res.status(429).json({
      success: false,
      message: '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
      retryAfter: secs
    });
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è rate limits (–¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
export const clearRateLimit = async (req: Request, res: Response) => {
  try {
    const { ip } = req.body;
    const targetIp = ip || req.ip || 'unknown';

    // –û—á–∏—â—É—î–º–æ –≤—Å—ñ —Ç–∏–ø–∏ –ª—ñ–º—ñ—Ç—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ IP
    await Promise.all([
      generalLimiter.delete(targetIp),
      authLimiter.delete(targetIp), 
      createLimiter.delete(targetIp)
    ]);

    res.json({
      success: true,
      message: `Rate limits –æ—á–∏—â–µ–Ω–æ –¥–ª—è IP: ${targetIp}`
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è rate limits'
    });
  }
};

// Rate limiter –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
export const authRateLimiter = async (req: Request, res: Response, next: NextFunction) => {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞–¥–º—ñ–Ω –∑–∞ email
    const isAdminEmail = req.body?.email && (
      req.body.email === 'admin@cfh.local' || 
      req.body.email.includes('admin@') ||
      req.body.email === 'root@cfh.local'
    );

    // –Ø–∫—â–æ —Ü–µ –∞–¥–º—ñ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ rate limiting
    if (isAdminEmail) {
      console.log(`üõ°Ô∏è  Rate limiting bypassed for admin: ${req.body.email}`);
      return next();
    }

    // –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ rate limiting
    const key = req.ip || 'unknown';
    await authLimiter.consume(key);
    next();
  } catch (rejRes: any) {
    const secs = Math.round(rejRes.msBeforeNext / 1000) || 1;
    res.set('Retry-After', String(secs));
    res.status(429).json({
      success: false,
      message: '–ó–∞–±–∞–≥–∞—Ç–æ —Å–ø—Ä–æ–± –≤—Ö–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.',
      retryAfter: secs
    });
  }
};

// Rate limiter –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
export const createRateLimiter = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const key = req.ip || 'unknown';
    await createLimiter.consume(key);
    next();
  } catch (rejRes: any) {
    const secs = Math.round(rejRes.msBeforeNext / 1000) || 1;
    res.set('Retry-After', String(secs));
    res.status(429).json({
      success: false,
      message: '–ó–∞–±–∞–≥–∞—Ç–æ –æ–ø–µ—Ä–∞—Ü—ñ–π —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
      retryAfter: secs
    });
  }
};