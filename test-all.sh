#!/bin/bash

# Client Feedback Hub - –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
# –ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–µ—Å—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É

set -e

echo "üß™ Client Feedback Hub - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
echo "================================================"

# –ö–æ–ª—å–æ—Ä–∏
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[TEST]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[PASS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[FAIL]${NC} $1"
}

# –§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤
run_tests() {
    local component=$1
    local exit_code=0
    
    print_status "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è $component..."
    
    case $component in
        "backend")
            cd backend
            
            # –õ—ñ–Ω—Ç–∏–Ω–≥
            print_status "–õ—ñ–Ω—Ç–∏–Ω–≥ backend –∫–æ–¥—É..."
            npm run lint || exit_code=1
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤
            print_status "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ TypeScript..."
            npm run type-check || exit_code=1
            
            # –Æ–Ω—ñ—Ç —Ç–µ—Å—Ç–∏
            print_status "–ó–∞–ø—É—Å–∫ —é–Ω—ñ—Ç —Ç–µ—Å—Ç—ñ–≤..."
            npm run test || exit_code=1
            
            # –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏
            print_status "–ó–∞–ø—É—Å–∫ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤..."
            npm run test:integration || exit_code=1
            
            # –ü–æ–∫—Ä–∏—Ç—Ç—è –∫–æ–¥—É
            print_status "–ê–Ω–∞–ª—ñ–∑ –ø–æ–∫—Ä–∏—Ç—Ç—è –∫–æ–¥—É..."
            npm run test:coverage || exit_code=1
            
            cd ..
            ;;
            
        "frontend")
            cd frontend
            
            # –õ—ñ–Ω—Ç–∏–Ω–≥
            print_status "–õ—ñ–Ω—Ç–∏–Ω–≥ frontend –∫–æ–¥—É..."
            npm run lint || exit_code=1
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤
            print_status "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ TypeScript..."
            npm run type-check || exit_code=1
            
            # –Æ–Ω—ñ—Ç —Ç–µ—Å—Ç–∏
            print_status "–ó–∞–ø—É—Å–∫ —é–Ω—ñ—Ç —Ç–µ—Å—Ç—ñ–≤..."
            npm run test || exit_code=1
            
            # –¢–µ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
            print_status "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤..."
            npm run test:components || exit_code=1
            
            # E2E —Ç–µ—Å—Ç–∏ (—è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ)
            if [ -f "playwright.config.ts" ]; then
                print_status "–ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç—ñ–≤..."
                npm run test:e2e || exit_code=1
            fi
            
            cd ..
            ;;
            
        "docker")
            print_status "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Docker –∑–±—ñ—Ä–∫–∏..."
            
            # –ó–±—ñ—Ä–∫–∞ backend –æ–±—Ä–∞–∑—É
            print_status "–ó–±—ñ—Ä–∫–∞ backend Docker –æ–±—Ä–∞–∑—É..."
            docker build -t cfh-backend:test backend/ || exit_code=1
            
            # –ó–±—ñ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑—É
            print_status "–ó–±—ñ—Ä–∫–∞ frontend Docker –æ–±—Ä–∞–∑—É..."
            docker build -t cfh-frontend:test frontend/ || exit_code=1
            
            # –¢–µ—Å—Ç docker-compose
            print_status "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è docker-compose..."
            docker-compose -f docker-compose.yml config || exit_code=1
            
            print_success "Docker –æ–±—Ä–∞–∑–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
            ;;
            
        "security")
            print_status "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏..."
            
            # –ê—É–¥–∏—Ç backend –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
            print_status "–ê—É–¥–∏—Ç backend –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
            cd backend
            npm audit --audit-level moderate || exit_code=1
            cd ..
            
            # –ê—É–¥–∏—Ç frontend –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
            print_status "–ê—É–¥–∏—Ç frontend –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
            cd frontend
            npm audit --audit-level moderate || exit_code=1
            cd ..
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env —Ñ–∞–π–ª—ñ–≤ –Ω–∞ —Å–µ–∫—Ä–µ—Ç–∏
            print_status "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤..."
            if grep -r "password123\|secret123\|key123" backend/.env frontend/.env 2>/dev/null; then
                print_warning "–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ñ —Å–µ–∫—Ä–µ—Ç–∏ —É .env —Ñ–∞–π–ª–∞—Ö"
                exit_code=1
            fi
            ;;
    esac
    
    return $exit_code
}

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É
generate_report() {
    local timestamp=$(date '+%Y-%m-%d_%H-%M-%S')
    local report_file="test-report-$timestamp.md"
    
    cat > "$report_file" << EOF
# Client Feedback Hub - –ó–≤—ñ—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è

**–î–∞—Ç–∞:** $(date '+%Y-%m-%d %H:%M:%S')
**–í–µ—Ä—Å—ñ—è:** $(git describe --tags --always 2>/dev/null || echo "dev")

## –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è

### Backend
- ‚úÖ –õ—ñ–Ω—Ç–∏–Ω–≥ –∫–æ–¥—É
- ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ TypeScript  
- ‚úÖ –Æ–Ω—ñ—Ç —Ç–µ—Å—Ç–∏
- ‚úÖ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏
- ‚úÖ –ü–æ–∫—Ä–∏—Ç—Ç—è –∫–æ–¥—É

### Frontend
- ‚úÖ –õ—ñ–Ω—Ç–∏–Ω–≥ –∫–æ–¥—É
- ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ TypeScript
- ‚úÖ –Æ–Ω—ñ—Ç —Ç–µ—Å—Ç–∏
- ‚úÖ –¢–µ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤

### Docker
- ‚úÖ –ó–±—ñ—Ä–∫–∞ backend –æ–±—Ä–∞–∑—É
- ‚úÖ –ó–±—ñ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑—É
- ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è docker-compose

### –ë–µ–∑–ø–µ–∫–∞
- ‚úÖ –ê—É–¥–∏—Ç –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
- ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó

## –ú–µ—Ç—Ä–∏–∫–∏

### Backend Coverage
\`\`\`
$(cd backend && npm run test:coverage --silent 2>/dev/null | tail -10 || echo "–ü–æ–∫—Ä–∏—Ç—Ç—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ")
\`\`\`

### Frontend Coverage  
\`\`\`
$(cd frontend && npm run test:coverage --silent 2>/dev/null | tail -10 || echo "–ü–æ–∫—Ä–∏—Ç—Ç—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ")
\`\`\`

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

- –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ—Å—Ç—ñ–≤ >80%
- –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
- –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –±–µ–∑–ø–µ–∫—É –ø–µ—Ä–µ–¥ —Ä–µ–ª—ñ–∑–æ–º

EOF
    
    print_success "–ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: $report_file"
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    local components=("$@")
    local total_errors=0
    
    # –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏, —Ç–µ—Å—Ç—É—î–º–æ –≤—Å–µ
    if [ ${#components[@]} -eq 0 ]; then
        components=("backend" "frontend" "docker" "security")
    fi
    
    print_status "–ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤: ${components[*]}"
    echo
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if [ ! -f "package.json" ]; then
        print_error "–ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –ø–∞–ø–∫–∏ –ø—Ä–æ—î–∫—Ç—É"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    for component in "${components[@]}"; do
        echo
        if run_tests "$component"; then
            print_success "$component —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ"
        else
            print_error "$component —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ"
            ((total_errors++))
        fi
    done
    
    echo
    echo "================================================"
    
    if [ $total_errors -eq 0 ]; then
        print_success "üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
    else
        print_error "‚ùå $total_errors –∫–æ–º–ø–æ–Ω–µ–Ω—Ç(—ñ–≤) –∑ –ø–æ–º–∏–ª–∫–∞–º–∏"
    fi
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É
    generate_report
    
    exit $total_errors
}

# –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É
show_help() {
    echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏...]"
    echo
    echo "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏:"
    echo "  backend    - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è backend –∫–æ–¥—É"
    echo "  frontend   - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è frontend –∫–æ–¥—É"  
    echo "  docker     - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Docker –∑–±—ñ—Ä–∫–∏"
    echo "  security   - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏"
    echo
    echo "–ü—Ä–∏–∫–ª–∞–¥–∏:"
    echo "  $0                    # –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –≤—Å–µ"
    echo "  $0 backend            # –¢—ñ–ª—å–∫–∏ backend"
    echo "  $0 frontend docker    # Frontend —Ç–∞ Docker"
    echo
    echo "–û–ø—Ü—ñ—ó:"
    echo "  -h, --help    –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
}

# –û–±—Ä–æ–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac